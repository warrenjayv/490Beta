+  page accessed by getCons 2019-04-26 10:02:28pm
+ received data : 

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:02:28pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 119
data received...
Array
(
    [ids] => Array
        (
            [0] => 1
        )

)

[ + ] page accessed testB 2019-04-26 10:02:28pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:02:28pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:02:28pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:02:28pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print (a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print (a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print (a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
backend getAttempt() failed. please check logs! 
+  page accessed by getCons 2019-04-26 10:05:54pm
+ received data : 

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:05:54pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 12173
data received...
Array
(
    [ids] => Array
        (
            [0] => 1
        )

)

[ + ] page accessed testB 2019-04-26 10:05:54pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:05:54pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:05:54pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:05:55pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print (a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print (a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print (a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ feedback (output) :
backend getAttempt() failed. please check logs! 
+ feedback (output) :
backend getAttempt() failed. please check logs! 
+  page accessed by getCons 2019-04-26 10:12:07pm
+ received data : 

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:12:07pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 24324
decoder at backend of getA received empty or null
+  page accessed by getCons 2019-04-26 10:12:23pm
+ received data : 

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:12:23pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 24632
data received...
Array
(
    [ids] => Array
        (
            [0] => 1
        )

)

[ + ] page accessed testB 2019-04-26 10:12:24pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:12:24pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:12:24pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:12:25pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print (a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print (a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print (a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print (a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
the array of attempts is pushed into 'attemptArray':
Array
(
    [0] => Array
        (
            [test] => Array
                (
                    [id] => 1
                    [desc] => Quiz One
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 5
                                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                                    [topic] => Subtraction
                                    [cons] => Array
                                        (
                                            [0] => print
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => sub(3,4)=-1
                                            [1] => sub(4,3)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 50
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [1] => def strMult(s, n):
    return s*n
                    [2] => def subtract(a,b)    print (a - b)
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                        )

                    [1] => Array
                        (
                        )

                    [2] => Array
                        (
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

)

+ encoded the attemptArray into JSON:
+ feedback (output) :
backend getAttempt() failed. please check logs! 
+ feedback (output) :
backend getAttempt() failed. please check logs! 
+  page accessed by getCons 2019-04-26 10:29:21pm
+ received data : 

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:29:21pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 45344
data received...
Array
(
    [ids] => Array
        (
            [0] => 1
        )

)

[ + ] page accessed testB 2019-04-26 10:29:21pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:29:21pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:29:21pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:29:21pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)    print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
the array of attempts is pushed into 'attemptArray':
Array
(
    [0] => Array
        (
            [test] => Array
                (
                    [id] => 1
                    [desc] => Quiz One
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 5
                                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                                    [topic] => Subtraction
                                    [cons] => Array
                                        (
                                            [0] => print
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => sub(3,4)=-1
                                            [1] => sub(4,3)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 50
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [1] => def strMult(s, n):
    return s*n
                    [2] => def subtract(a,b)    print(a - b)
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                        )

                    [1] => Array
                        (
                        )

                    [2] => Array
                        (
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

)

+ encoded the attemptArray into JSON:
+ feedback (output) :
backend getAttempt() failed. please check logs! 
+ feedback (output) :
backend getAttempt() failed. please check logs! 
+  page accessed by getCons 2019-04-26 10:30:16pm
+ received data : 

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:30:16pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 66051
data received...
Array
(
    [ids] => Array
        (
            [0] => 1
        )

)

[ + ] page accessed testB 2019-04-26 10:30:16pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:30:16pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:30:16pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:30:16pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
the array of attempts is pushed into 'attemptArray':
Array
(
    [0] => Array
        (
            [test] => Array
                (
                    [id] => 1
                    [desc] => Quiz One
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 5
                                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                                    [topic] => Subtraction
                                    [cons] => Array
                                        (
                                            [0] => print
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => sub(3,4)=-1
                                            [1] => sub(4,3)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 50
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [1] => def strMult(s, n):
    return s*n
                    [2] => def subtract(a,b) print(a - b)
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                        )

                    [1] => Array
                        (
                        )

                    [2] => Array
                        (
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

)

+ encoded the attemptArray into JSON:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["25","50","25"],"feedback":[[],[],[]],"remarks":["","",""],"rel":"0"}]}executing getAttempt()...output:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["25","50","25"],"feedback":[[],[],[]],"remarks":["","",""],"rel":"0"}]}+  page accessed by getCons 2019-04-26 10:32:09pm
+ received data : 

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:32:09pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 89204
decoder at backend of getA received empty or null
+  page accessed by getCons 2019-04-26 10:32:12pm
+ received data : 
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:32:12pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 89581
data received...
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

decoder returned an empty array of ids! go get em!
getallIds() is called!
[ + ] page accessed testB 2019-04-26 10:32:12pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:12pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:32:12pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:32:12pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:13pm
executing testObject() with testId = 2
SELECT * FROM Test WHERE Id = '2' 
test being formed (temp1)...
Array
(
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:13pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 120 
[ + ] page accessed quesB 2019-04-26 10:32:13pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 120 
executing testObject() for test id : 2 
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

pushed test 2 into testArray
executing getFeedbacks() for testId 2 & qId 1
Array
(
    [0] => g12p colon [:] in user answer
    [1] => b12p expecting function: operation, it was not found!
    [2] => b87p user program failed to execute. 
)

executing getFeedbacks() for testId 2 & qId 2
Array
(
    [0] => b6p constraint [for]  was not found.
    [1] => b6p constraint [print]  was not found.
    [2] => g6p colon [:] in user answer
    [3] => g6p expecting function: strMult, function found!
    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 2 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 2
            [desc] => Vector Pioneer 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 120
                    [1] => 120
                )

        )

    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:13pm
executing testObject() with testId = 4
SELECT * FROM Test WHERE Id = '4' 
test being formed (temp1)...
Array
(
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:13pm
executing quesObject() with qId = 6
obtaining testcases for qId = 6
building the ques object (temp1)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
    [tests] => Array
        (
            [0] => stringSub(-3, -9)=six
            [1] => stringSub(9, 9)=zero
            [2] => stringSub(50,9)=fourty-nine
            [3] => stringSub(5,2)=three
        )

)
question object for test built!

obtaining points from each question id: 6 
pts for this question : 10 
[ + ] page accessed quesB 2019-04-26 10:32:13pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 10 
executing testObject() for test id : 4 
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                    [tests] => Array
                        (
                            [0] => stringSub(-3, -9)=six
                            [1] => stringSub(9, 9)=zero
                            [2] => stringSub(50,9)=fourty-nine
                            [3] => stringSub(5,2)=three
                        )

                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)

pushed test 4 into testArray
executing getFeedbacks() for testId 4 & qId 6
Array
(
    [0] => g1p colon [:] in user answer
    [1] => g1p expecting function: stringSub, function found!
    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
    [6] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 4 & qId 3
Array
(
    [0] => b1p missing colon [:] in user answer
    [1] => g1p expecting function: addThree, function found!
    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 4 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 4
            [desc] => testing the new feedback system
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 6
                            [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                            [topic] => String Subtract
                            [cons] => Array
                                (
                                )

                            [diff] => 5
                            [tests] => Array
                                (
                                    [0] => stringSub(-3, -9)=six
                                    [1] => stringSub(9, 9)=zero
                                    [2] => stringSub(50,9)=fourty-nine
                                    [3] => stringSub(5,2)=three
                                )

                        )

                    [1] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 10
                    [1] => 10
                )

        )

    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:13pm
executing testObject() with testId = 5
SELECT * FROM Test WHERE Id = '5' 
test being formed (temp1)...
Array
(
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:13pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:32:13pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:32:13pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
executing testObject() for test id : 5 
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)

pushed test 5 into testArray
executing getFeedbacks() for testId 5 & qId 1
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: operation, function found!
    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 2
Array
(
    [0] => b2p constraint [for]  was not found.
    [1] => g2p constraint [print] was found.
    [2] => g2p colon [:] in user answer
    [3] => b2p expecting function: strMult, it was not found!
    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => b2p missing colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 5 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 5
            [desc] => Sample Quiz
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                    [1] => 25
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:13pm
executing testObject() with testId = 6
SELECT * FROM Test WHERE Id = '6' 
test being formed (temp1)...
Array
(
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:13pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:32:13pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:32:13pm
executing quesObject() with qId = 7
obtaining testcases for qId = 7
building the ques object (temp1)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => a()=d
            [1] => a()=d
        )

)
question object for test built!

obtaining points from each question id: 7 
pts for this question : 50 
executing testObject() for test id : 6 
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => a()=d
                            [1] => a()=d
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)

pushed test 6 into testArray
executing getFeedbacks() for testId 6 & qId 3
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: addThree, function found!
    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 1
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: operation, function found!
    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [9] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 7
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [while]  was not found.
    [2] => b3p missing colon [:] in user answer
    [3] => g3p expecting function: a, function found!
    [4] => b33p user program failed to execute. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

executing ansObject() for test id : 6 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 6
            [desc] => Test Exam 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                    [1] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [2] => Array
                        (
                            [id] => 7
                            [desc] => Descriptionnnss
                            [topic] => TipTop
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => while
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => a()=d
                                    [1] => a()=d
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 25
                    [2] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:13pm
executing testObject() with testId = 7
SELECT * FROM Test WHERE Id = '7' 
test being formed (temp1)...
Array
(
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:13pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 50 
executing testObject() for test id : 7 
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)

pushed test 7 into testArray
executing getFeedbacks() for testId 7 & qId 3
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: addThree, function found!
    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 7 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
the array of attempts is pushed into 'attemptArray':
Array
(
    [0] => Array
        (
            [test] => Array
                (
                    [id] => 1
                    [desc] => Quiz One
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 5
                                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                                    [topic] => Subtraction
                                    [cons] => Array
                                        (
                                            [0] => print
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => sub(3,4)=-1
                                            [1] => sub(4,3)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 50
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [1] => def strMult(s, n):
    return s*n
                    [2] => def subtract(a,b) print(a - b)
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                        )

                    [1] => Array
                        (
                        )

                    [2] => Array
                        (
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [1] => Array
        (
            [test] => Array
                (
                    [id] => 2
                    [desc] => Vector Pioneer 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 120
                            [1] => 120
                        )

                )

            [answers] => Array
                (
                    [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
                    [1] => def strMult(s, n):
    return s * n
                )

            [grades] => Array
                (
                    [0] => 21
                    [1] => 108
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g12p colon [:] in user answer
                            [1] => b12p expecting function: operation, it was not found!
                            [2] => b87p user program failed to execute. 
                        )

                    [1] => Array
                        (
                            [0] => b6p constraint [for]  was not found.
                            [1] => b6p constraint [print]  was not found.
                            [2] => g6p colon [:] in user answer
                            [3] => g6p expecting function: strMult, function found!
                            [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
                    [1] => 
                )

            [rel] => 0
        )

    [2] => Array
        (
            [test] => Array
                (
                    [id] => 4
                    [desc] => testing the new feedback system
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 6
                                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                                    [topic] => String Subtract
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 5
                                    [tests] => Array
                                        (
                                            [0] => stringSub(-3, -9)=six
                                            [1] => stringSub(9, 9)=zero
                                            [2] => stringSub(50,9)=fourty-nine
                                            [3] => stringSub(5,2)=three
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 10
                            [1] => 10
                        )

                )

            [answers] => Array
                (
                    [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
                    [1] => def addThree(a, b, c)
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 8
                    [1] => 9
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g1p colon [:] in user answer
                            [1] => g1p expecting function: stringSub, function found!
                            [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                            [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                            [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                            [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                            [6] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b1p missing colon [:] in user answer
                            [1] => g1p expecting function: addThree, function found!
                            [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                )

            [rel] => 0
        )

    [3] => Array
        (
            [test] => Array
                (
                    [id] => 5
                    [desc] => Sample Quiz
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                            [1] => 25
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

                    [1] => def stringMult(s, n):
    print s*n
                    [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
                )

            [grades] => Array
                (
                    [0] => 29
                    [1] => 21
                    [2] => 20
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: operation, function found!
                            [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                            [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [8] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b2p constraint [for]  was not found.
                            [1] => g2p constraint [print] was found.
                            [2] => g2p colon [:] in user answer
                            [3] => b2p expecting function: strMult, it was not found!
                            [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [4] => Array
        (
            [test] => Array
                (
                    [id] => 6
                    [desc] => Test Exam 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 7
                                    [desc] => Descriptionnnss
                                    [topic] => TipTop
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => while
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => a()=d
                                            [1] => a()=d
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 25
                            [2] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                    [1] => def operation(op, a, b):
    if op == '+':
        return a + b
                    [2] => return 'a'
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 10
                    [2] => 8
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: addThree, function found!
                            [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: operation, function found!
                            [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                            [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                            [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [9] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [while]  was not found.
                            [2] => b3p missing colon [:] in user answer
                            [3] => g3p expecting function: a, function found!
                            [4] => b33p user program failed to execute. 
                        )

                )

            [remarks] => Array
                (
                    [0] => New Remark for ya
                    [1] => 
                    [2] => 
                )

            [rel] => 1
        )

    [5] => Array
        (
            [test] => Array
                (
                    [id] => 7
                    [desc] => My Test
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 50
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: addThree, function found!
                            [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                )

            [rel] => 0
        )

)

+ encoded the attemptArray into JSON:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["25","50","25"],"feedback":[[],[],[]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}executing getAttempt()...output:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["25","50","25"],"feedback":[[],[],[]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}+  page accessed by getCons 2019-04-26 10:32:34pm
+ received data : 
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:32:34pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 241095
data received...
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

decoder returned an empty array of ids! go get em!
getallIds() is called!
[ + ] page accessed testB 2019-04-26 10:32:34pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:34pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:32:34pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:32:34pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:34pm
executing testObject() with testId = 2
SELECT * FROM Test WHERE Id = '2' 
test being formed (temp1)...
Array
(
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:34pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 120 
[ + ] page accessed quesB 2019-04-26 10:32:34pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 120 
executing testObject() for test id : 2 
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

pushed test 2 into testArray
executing getFeedbacks() for testId 2 & qId 1
Array
(
    [0] => g12p colon [:] in user answer
    [1] => b12p expecting function: operation, it was not found!
    [2] => b87p user program failed to execute. 
)

executing getFeedbacks() for testId 2 & qId 2
Array
(
    [0] => b6p constraint [for]  was not found.
    [1] => b6p constraint [print]  was not found.
    [2] => g6p colon [:] in user answer
    [3] => g6p expecting function: strMult, function found!
    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 2 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 2
            [desc] => Vector Pioneer 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 120
                    [1] => 120
                )

        )

    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:34pm
executing testObject() with testId = 4
SELECT * FROM Test WHERE Id = '4' 
test being formed (temp1)...
Array
(
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:34pm
executing quesObject() with qId = 6
obtaining testcases for qId = 6
building the ques object (temp1)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
    [tests] => Array
        (
            [0] => stringSub(-3, -9)=six
            [1] => stringSub(9, 9)=zero
            [2] => stringSub(50,9)=fourty-nine
            [3] => stringSub(5,2)=three
        )

)
question object for test built!

obtaining points from each question id: 6 
pts for this question : 10 
[ + ] page accessed quesB 2019-04-26 10:32:34pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 10 
executing testObject() for test id : 4 
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                    [tests] => Array
                        (
                            [0] => stringSub(-3, -9)=six
                            [1] => stringSub(9, 9)=zero
                            [2] => stringSub(50,9)=fourty-nine
                            [3] => stringSub(5,2)=three
                        )

                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)

pushed test 4 into testArray
executing getFeedbacks() for testId 4 & qId 6
Array
(
    [0] => g1p colon [:] in user answer
    [1] => g1p expecting function: stringSub, function found!
    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
    [6] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 4 & qId 3
Array
(
    [0] => b1p missing colon [:] in user answer
    [1] => g1p expecting function: addThree, function found!
    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 4 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 4
            [desc] => testing the new feedback system
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 6
                            [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                            [topic] => String Subtract
                            [cons] => Array
                                (
                                )

                            [diff] => 5
                            [tests] => Array
                                (
                                    [0] => stringSub(-3, -9)=six
                                    [1] => stringSub(9, 9)=zero
                                    [2] => stringSub(50,9)=fourty-nine
                                    [3] => stringSub(5,2)=three
                                )

                        )

                    [1] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 10
                    [1] => 10
                )

        )

    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:35pm
executing testObject() with testId = 5
SELECT * FROM Test WHERE Id = '5' 
test being formed (temp1)...
Array
(
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:35pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:32:35pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:32:35pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
executing testObject() for test id : 5 
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)

pushed test 5 into testArray
executing getFeedbacks() for testId 5 & qId 1
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: operation, function found!
    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 2
Array
(
    [0] => b2p constraint [for]  was not found.
    [1] => g2p constraint [print] was found.
    [2] => g2p colon [:] in user answer
    [3] => b2p expecting function: strMult, it was not found!
    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => b2p missing colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 5 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 5
            [desc] => Sample Quiz
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                    [1] => 25
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:35pm
executing testObject() with testId = 6
SELECT * FROM Test WHERE Id = '6' 
test being formed (temp1)...
Array
(
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:35pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:32:35pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:32:35pm
executing quesObject() with qId = 7
obtaining testcases for qId = 7
building the ques object (temp1)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => a()=d
            [1] => a()=d
        )

)
question object for test built!

obtaining points from each question id: 7 
pts for this question : 50 
executing testObject() for test id : 6 
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => a()=d
                            [1] => a()=d
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)

pushed test 6 into testArray
executing getFeedbacks() for testId 6 & qId 3
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: addThree, function found!
    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 1
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: operation, function found!
    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [9] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 7
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [while]  was not found.
    [2] => b3p missing colon [:] in user answer
    [3] => g3p expecting function: a, function found!
    [4] => b33p user program failed to execute. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

executing ansObject() for test id : 6 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 6
            [desc] => Test Exam 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                    [1] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [2] => Array
                        (
                            [id] => 7
                            [desc] => Descriptionnnss
                            [topic] => TipTop
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => while
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => a()=d
                                    [1] => a()=d
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 25
                    [2] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:35pm
executing testObject() with testId = 7
SELECT * FROM Test WHERE Id = '7' 
test being formed (temp1)...
Array
(
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:35pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 50 
executing testObject() for test id : 7 
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)

pushed test 7 into testArray
executing getFeedbacks() for testId 7 & qId 3
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: addThree, function found!
    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 7 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
the array of attempts is pushed into 'attemptArray':
Array
(
    [0] => Array
        (
            [test] => Array
                (
                    [id] => 1
                    [desc] => Quiz One
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 5
                                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                                    [topic] => Subtraction
                                    [cons] => Array
                                        (
                                            [0] => print
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => sub(3,4)=-1
                                            [1] => sub(4,3)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 50
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [1] => def strMult(s, n):
    return s*n
                    [2] => def subtract(a,b) print(a - b)
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                        )

                    [1] => Array
                        (
                        )

                    [2] => Array
                        (
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [1] => Array
        (
            [test] => Array
                (
                    [id] => 2
                    [desc] => Vector Pioneer 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 120
                            [1] => 120
                        )

                )

            [answers] => Array
                (
                    [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
                    [1] => def strMult(s, n):
    return s * n
                )

            [grades] => Array
                (
                    [0] => 21
                    [1] => 108
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g12p colon [:] in user answer
                            [1] => b12p expecting function: operation, it was not found!
                            [2] => b87p user program failed to execute. 
                        )

                    [1] => Array
                        (
                            [0] => b6p constraint [for]  was not found.
                            [1] => b6p constraint [print]  was not found.
                            [2] => g6p colon [:] in user answer
                            [3] => g6p expecting function: strMult, function found!
                            [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
                    [1] => 
                )

            [rel] => 0
        )

    [2] => Array
        (
            [test] => Array
                (
                    [id] => 4
                    [desc] => testing the new feedback system
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 6
                                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                                    [topic] => String Subtract
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 5
                                    [tests] => Array
                                        (
                                            [0] => stringSub(-3, -9)=six
                                            [1] => stringSub(9, 9)=zero
                                            [2] => stringSub(50,9)=fourty-nine
                                            [3] => stringSub(5,2)=three
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 10
                            [1] => 10
                        )

                )

            [answers] => Array
                (
                    [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
                    [1] => def addThree(a, b, c)
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 8
                    [1] => 9
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g1p colon [:] in user answer
                            [1] => g1p expecting function: stringSub, function found!
                            [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                            [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                            [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                            [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                            [6] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b1p missing colon [:] in user answer
                            [1] => g1p expecting function: addThree, function found!
                            [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                )

            [rel] => 0
        )

    [3] => Array
        (
            [test] => Array
                (
                    [id] => 5
                    [desc] => Sample Quiz
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                            [1] => 25
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

                    [1] => def stringMult(s, n):
    print s*n
                    [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
                )

            [grades] => Array
                (
                    [0] => 29
                    [1] => 21
                    [2] => 20
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: operation, function found!
                            [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                            [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [8] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b2p constraint [for]  was not found.
                            [1] => g2p constraint [print] was found.
                            [2] => g2p colon [:] in user answer
                            [3] => b2p expecting function: strMult, it was not found!
                            [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [4] => Array
        (
            [test] => Array
                (
                    [id] => 6
                    [desc] => Test Exam 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 7
                                    [desc] => Descriptionnnss
                                    [topic] => TipTop
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => while
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => a()=d
                                            [1] => a()=d
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 25
                            [2] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                    [1] => def operation(op, a, b):
    if op == '+':
        return a + b
                    [2] => return 'a'
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 10
                    [2] => 8
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: addThree, function found!
                            [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: operation, function found!
                            [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                            [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                            [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [9] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [while]  was not found.
                            [2] => b3p missing colon [:] in user answer
                            [3] => g3p expecting function: a, function found!
                            [4] => b33p user program failed to execute. 
                        )

                )

            [remarks] => Array
                (
                    [0] => New Remark for ya
                    [1] => 
                    [2] => 
                )

            [rel] => 1
        )

    [5] => Array
        (
            [test] => Array
                (
                    [id] => 7
                    [desc] => My Test
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 50
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: addThree, function found!
                            [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                )

            [rel] => 0
        )

)

+ encoded the attemptArray into JSON:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["25","50","25"],"feedback":[[],[],[]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}executing getAttempt()...output:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["25","50","25"],"feedback":[[],[],[]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}+  page accessed by getCons 2019-04-26 10:32:49pm
+ received data : 
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:32:49pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 392610
data received...
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

decoder returned an empty array of ids! go get em!
getallIds() is called!
[ + ] page accessed testB 2019-04-26 10:32:49pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:49pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:32:49pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:32:49pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => g2p colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [print]  was not found.
    [2] => g3p colon [:] in user answer
    [3] => g3p expecting function: strMult, function found!
    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
    [0] => g3p constraint [print] was found.
    [1] => b2p missing colon [:] in user answer
    [2] => b2p expecting function: sub, it was not found!
    [3] => b17p user program failed to execute. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 22
            [1] => 44
            [2] => 4
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => g2p colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [print]  was not found.
                    [2] => g3p colon [:] in user answer
                    [3] => g3p expecting function: strMult, function found!
                    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => g3p constraint [print] was found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => b2p expecting function: sub, it was not found!
                    [3] => b17p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 22
            [1] => 44
            [2] => 4
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => g2p colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [print]  was not found.
                    [2] => g3p colon [:] in user answer
                    [3] => g3p expecting function: strMult, function found!
                    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => g3p constraint [print] was found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => b2p expecting function: sub, it was not found!
                    [3] => b17p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 22
            [1] => 44
            [2] => 4
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => g2p colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [print]  was not found.
                    [2] => g3p colon [:] in user answer
                    [3] => g3p expecting function: strMult, function found!
                    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => g3p constraint [print] was found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => b2p expecting function: sub, it was not found!
                    [3] => b17p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:49pm
executing testObject() with testId = 2
SELECT * FROM Test WHERE Id = '2' 
test being formed (temp1)...
Array
(
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:49pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 120 
[ + ] page accessed quesB 2019-04-26 10:32:49pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 120 
executing testObject() for test id : 2 
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

pushed test 2 into testArray
executing getFeedbacks() for testId 2 & qId 1
Array
(
    [0] => g12p colon [:] in user answer
    [1] => b12p expecting function: operation, it was not found!
    [2] => b87p user program failed to execute. 
)

executing getFeedbacks() for testId 2 & qId 2
Array
(
    [0] => b6p constraint [for]  was not found.
    [1] => b6p constraint [print]  was not found.
    [2] => g6p colon [:] in user answer
    [3] => g6p expecting function: strMult, function found!
    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 2 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 2
            [desc] => Vector Pioneer 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 120
                    [1] => 120
                )

        )

    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:50pm
executing testObject() with testId = 4
SELECT * FROM Test WHERE Id = '4' 
test being formed (temp1)...
Array
(
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:50pm
executing quesObject() with qId = 6
obtaining testcases for qId = 6
building the ques object (temp1)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
    [tests] => Array
        (
            [0] => stringSub(-3, -9)=six
            [1] => stringSub(9, 9)=zero
            [2] => stringSub(50,9)=fourty-nine
            [3] => stringSub(5,2)=three
        )

)
question object for test built!

obtaining points from each question id: 6 
pts for this question : 10 
[ + ] page accessed quesB 2019-04-26 10:32:50pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 10 
executing testObject() for test id : 4 
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                    [tests] => Array
                        (
                            [0] => stringSub(-3, -9)=six
                            [1] => stringSub(9, 9)=zero
                            [2] => stringSub(50,9)=fourty-nine
                            [3] => stringSub(5,2)=three
                        )

                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)

pushed test 4 into testArray
executing getFeedbacks() for testId 4 & qId 6
Array
(
    [0] => g1p colon [:] in user answer
    [1] => g1p expecting function: stringSub, function found!
    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
    [6] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 4 & qId 3
Array
(
    [0] => b1p missing colon [:] in user answer
    [1] => g1p expecting function: addThree, function found!
    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 4 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 4
            [desc] => testing the new feedback system
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 6
                            [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                            [topic] => String Subtract
                            [cons] => Array
                                (
                                )

                            [diff] => 5
                            [tests] => Array
                                (
                                    [0] => stringSub(-3, -9)=six
                                    [1] => stringSub(9, 9)=zero
                                    [2] => stringSub(50,9)=fourty-nine
                                    [3] => stringSub(5,2)=three
                                )

                        )

                    [1] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 10
                    [1] => 10
                )

        )

    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:50pm
executing testObject() with testId = 5
SELECT * FROM Test WHERE Id = '5' 
test being formed (temp1)...
Array
(
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:50pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:32:50pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:32:50pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
executing testObject() for test id : 5 
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)

pushed test 5 into testArray
executing getFeedbacks() for testId 5 & qId 1
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: operation, function found!
    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 2
Array
(
    [0] => b2p constraint [for]  was not found.
    [1] => g2p constraint [print] was found.
    [2] => g2p colon [:] in user answer
    [3] => b2p expecting function: strMult, it was not found!
    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => b2p missing colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 5 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 5
            [desc] => Sample Quiz
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                    [1] => 25
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:50pm
executing testObject() with testId = 6
SELECT * FROM Test WHERE Id = '6' 
test being formed (temp1)...
Array
(
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:50pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:32:51pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:32:51pm
executing quesObject() with qId = 7
obtaining testcases for qId = 7
building the ques object (temp1)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => a()=d
            [1] => a()=d
        )

)
question object for test built!

obtaining points from each question id: 7 
pts for this question : 50 
executing testObject() for test id : 6 
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => a()=d
                            [1] => a()=d
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)

pushed test 6 into testArray
executing getFeedbacks() for testId 6 & qId 3
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: addThree, function found!
    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 1
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: operation, function found!
    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [9] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 7
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [while]  was not found.
    [2] => b3p missing colon [:] in user answer
    [3] => g3p expecting function: a, function found!
    [4] => b33p user program failed to execute. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

executing ansObject() for test id : 6 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 6
            [desc] => Test Exam 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                    [1] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [2] => Array
                        (
                            [id] => 7
                            [desc] => Descriptionnnss
                            [topic] => TipTop
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => while
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => a()=d
                                    [1] => a()=d
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 25
                    [2] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:32:51pm
executing testObject() with testId = 7
SELECT * FROM Test WHERE Id = '7' 
test being formed (temp1)...
Array
(
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:32:51pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 50 
executing testObject() for test id : 7 
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)

pushed test 7 into testArray
executing getFeedbacks() for testId 7 & qId 3
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: addThree, function found!
    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 7 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
the array of attempts is pushed into 'attemptArray':
Array
(
    [0] => Array
        (
            [test] => Array
                (
                    [id] => 1
                    [desc] => Quiz One
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 5
                                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                                    [topic] => Subtraction
                                    [cons] => Array
                                        (
                                            [0] => print
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => sub(3,4)=-1
                                            [1] => sub(4,3)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 50
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [1] => def strMult(s, n):
    return s*n
                    [2] => def subtract(a,b) print(a - b)
                )

            [grades] => Array
                (
                    [0] => 22
                    [1] => 44
                    [2] => 4
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => g2p colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [print]  was not found.
                            [2] => g3p colon [:] in user answer
                            [3] => g3p expecting function: strMult, function found!
                            [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => g3p constraint [print] was found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => b2p expecting function: sub, it was not found!
                            [3] => b17p user program failed to execute. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [1] => Array
        (
            [test] => Array
                (
                    [id] => 2
                    [desc] => Vector Pioneer 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 120
                            [1] => 120
                        )

                )

            [answers] => Array
                (
                    [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
                    [1] => def strMult(s, n):
    return s * n
                )

            [grades] => Array
                (
                    [0] => 21
                    [1] => 108
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g12p colon [:] in user answer
                            [1] => b12p expecting function: operation, it was not found!
                            [2] => b87p user program failed to execute. 
                        )

                    [1] => Array
                        (
                            [0] => b6p constraint [for]  was not found.
                            [1] => b6p constraint [print]  was not found.
                            [2] => g6p colon [:] in user answer
                            [3] => g6p expecting function: strMult, function found!
                            [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
                    [1] => 
                )

            [rel] => 0
        )

    [2] => Array
        (
            [test] => Array
                (
                    [id] => 4
                    [desc] => testing the new feedback system
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 6
                                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                                    [topic] => String Subtract
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 5
                                    [tests] => Array
                                        (
                                            [0] => stringSub(-3, -9)=six
                                            [1] => stringSub(9, 9)=zero
                                            [2] => stringSub(50,9)=fourty-nine
                                            [3] => stringSub(5,2)=three
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 10
                            [1] => 10
                        )

                )

            [answers] => Array
                (
                    [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
                    [1] => def addThree(a, b, c)
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 8
                    [1] => 9
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g1p colon [:] in user answer
                            [1] => g1p expecting function: stringSub, function found!
                            [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                            [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                            [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                            [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                            [6] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b1p missing colon [:] in user answer
                            [1] => g1p expecting function: addThree, function found!
                            [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                )

            [rel] => 0
        )

    [3] => Array
        (
            [test] => Array
                (
                    [id] => 5
                    [desc] => Sample Quiz
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                            [1] => 25
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

                    [1] => def stringMult(s, n):
    print s*n
                    [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
                )

            [grades] => Array
                (
                    [0] => 29
                    [1] => 21
                    [2] => 20
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: operation, function found!
                            [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                            [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [8] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b2p constraint [for]  was not found.
                            [1] => g2p constraint [print] was found.
                            [2] => g2p colon [:] in user answer
                            [3] => b2p expecting function: strMult, it was not found!
                            [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [4] => Array
        (
            [test] => Array
                (
                    [id] => 6
                    [desc] => Test Exam 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 7
                                    [desc] => Descriptionnnss
                                    [topic] => TipTop
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => while
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => a()=d
                                            [1] => a()=d
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 25
                            [2] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                    [1] => def operation(op, a, b):
    if op == '+':
        return a + b
                    [2] => return 'a'
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 10
                    [2] => 8
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: addThree, function found!
                            [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: operation, function found!
                            [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                            [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                            [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [9] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [while]  was not found.
                            [2] => b3p missing colon [:] in user answer
                            [3] => g3p expecting function: a, function found!
                            [4] => b33p user program failed to execute. 
                        )

                )

            [remarks] => Array
                (
                    [0] => New Remark for ya
                    [1] => 
                    [2] => 
                )

            [rel] => 1
        )

    [5] => Array
        (
            [test] => Array
                (
                    [id] => 7
                    [desc] => My Test
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 50
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: addThree, function found!
                            [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                )

            [rel] => 0
        )

)

+ encoded the attemptArray into JSON:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["22","44","4"],"feedback":[["b3p constraint [while]  was not found.","g2p colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [print]  was not found.","g3p colon [:] in user answer","g3p expecting function: strMult, function found!","g10p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g10p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g10p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g10p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["g3p constraint [print] was found.","b2p missing colon [:] in user answer","b2p expecting function: sub, it was not found!","b17p user program failed to execute. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}executing getAttempt()...output:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["22","44","4"],"feedback":[["b3p constraint [while]  was not found.","g2p colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [print]  was not found.","g3p colon [:] in user answer","g3p expecting function: strMult, function found!","g10p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g10p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g10p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g10p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["g3p constraint [print] was found.","b2p missing colon [:] in user answer","b2p expecting function: sub, it was not found!","b17p user program failed to execute. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}+  page accessed by getCons 2019-04-26 10:33:49pm
+ received data : 
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:33:49pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 554615
data received...
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

decoder returned an empty array of ids! go get em!
getallIds() is called!
[ + ] page accessed testB 2019-04-26 10:33:49pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:33:49pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:33:50pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:33:50pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => g2p colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [print]  was not found.
    [2] => g3p colon [:] in user answer
    [3] => g3p expecting function: strMult, function found!
    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
    [0] => g3p constraint [print] was found.
    [1] => b2p missing colon [:] in user answer
    [2] => b2p expecting function: sub, it was not found!
    [3] => b17p user program failed to execute. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 22
            [1] => 44
            [2] => 4
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => g2p colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [print]  was not found.
                    [2] => g3p colon [:] in user answer
                    [3] => g3p expecting function: strMult, function found!
                    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => g3p constraint [print] was found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => b2p expecting function: sub, it was not found!
                    [3] => b17p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 22
            [1] => 44
            [2] => 4
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => g2p colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [print]  was not found.
                    [2] => g3p colon [:] in user answer
                    [3] => g3p expecting function: strMult, function found!
                    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => g3p constraint [print] was found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => b2p expecting function: sub, it was not found!
                    [3] => b17p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 22
            [1] => 44
            [2] => 4
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => g2p colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [print]  was not found.
                    [2] => g3p colon [:] in user answer
                    [3] => g3p expecting function: strMult, function found!
                    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => g3p constraint [print] was found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => b2p expecting function: sub, it was not found!
                    [3] => b17p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:33:50pm
executing testObject() with testId = 2
SELECT * FROM Test WHERE Id = '2' 
test being formed (temp1)...
Array
(
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:33:50pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 120 
[ + ] page accessed quesB 2019-04-26 10:33:50pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 120 
executing testObject() for test id : 2 
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

pushed test 2 into testArray
executing getFeedbacks() for testId 2 & qId 1
Array
(
    [0] => g12p colon [:] in user answer
    [1] => b12p expecting function: operation, it was not found!
    [2] => b87p user program failed to execute. 
)

executing getFeedbacks() for testId 2 & qId 2
Array
(
    [0] => b6p constraint [for]  was not found.
    [1] => b6p constraint [print]  was not found.
    [2] => g6p colon [:] in user answer
    [3] => g6p expecting function: strMult, function found!
    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 2 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 2
            [desc] => Vector Pioneer 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 120
                    [1] => 120
                )

        )

    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:33:51pm
executing testObject() with testId = 4
SELECT * FROM Test WHERE Id = '4' 
test being formed (temp1)...
Array
(
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:33:51pm
executing quesObject() with qId = 6
obtaining testcases for qId = 6
building the ques object (temp1)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
    [tests] => Array
        (
            [0] => stringSub(-3, -9)=six
            [1] => stringSub(9, 9)=zero
            [2] => stringSub(50,9)=fourty-nine
            [3] => stringSub(5,2)=three
        )

)
question object for test built!

obtaining points from each question id: 6 
pts for this question : 10 
[ + ] page accessed quesB 2019-04-26 10:33:51pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 10 
executing testObject() for test id : 4 
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                    [tests] => Array
                        (
                            [0] => stringSub(-3, -9)=six
                            [1] => stringSub(9, 9)=zero
                            [2] => stringSub(50,9)=fourty-nine
                            [3] => stringSub(5,2)=three
                        )

                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)

pushed test 4 into testArray
executing getFeedbacks() for testId 4 & qId 6
Array
(
    [0] => g1p colon [:] in user answer
    [1] => g1p expecting function: stringSub, function found!
    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
    [6] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 4 & qId 3
Array
(
    [0] => b1p missing colon [:] in user answer
    [1] => g1p expecting function: addThree, function found!
    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 4 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 4
            [desc] => testing the new feedback system
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 6
                            [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                            [topic] => String Subtract
                            [cons] => Array
                                (
                                )

                            [diff] => 5
                            [tests] => Array
                                (
                                    [0] => stringSub(-3, -9)=six
                                    [1] => stringSub(9, 9)=zero
                                    [2] => stringSub(50,9)=fourty-nine
                                    [3] => stringSub(5,2)=three
                                )

                        )

                    [1] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 10
                    [1] => 10
                )

        )

    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:33:51pm
executing testObject() with testId = 5
SELECT * FROM Test WHERE Id = '5' 
test being formed (temp1)...
Array
(
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:33:52pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:33:52pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:33:52pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
executing testObject() for test id : 5 
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)

pushed test 5 into testArray
executing getFeedbacks() for testId 5 & qId 1
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: operation, function found!
    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 2
Array
(
    [0] => b2p constraint [for]  was not found.
    [1] => g2p constraint [print] was found.
    [2] => g2p colon [:] in user answer
    [3] => b2p expecting function: strMult, it was not found!
    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => b2p missing colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 5 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 5
            [desc] => Sample Quiz
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                    [1] => 25
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:33:52pm
executing testObject() with testId = 6
SELECT * FROM Test WHERE Id = '6' 
test being formed (temp1)...
Array
(
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:33:52pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:33:52pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:33:53pm
executing quesObject() with qId = 7
obtaining testcases for qId = 7
building the ques object (temp1)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => a()=d
            [1] => a()=d
        )

)
question object for test built!

obtaining points from each question id: 7 
pts for this question : 50 
executing testObject() for test id : 6 
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => a()=d
                            [1] => a()=d
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)

pushed test 6 into testArray
executing getFeedbacks() for testId 6 & qId 3
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: addThree, function found!
    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 1
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: operation, function found!
    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [9] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 7
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [while]  was not found.
    [2] => b3p missing colon [:] in user answer
    [3] => g3p expecting function: a, function found!
    [4] => b33p user program failed to execute. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

executing ansObject() for test id : 6 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 6
            [desc] => Test Exam 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                    [1] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [2] => Array
                        (
                            [id] => 7
                            [desc] => Descriptionnnss
                            [topic] => TipTop
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => while
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => a()=d
                                    [1] => a()=d
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 25
                    [2] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:33:53pm
executing testObject() with testId = 7
SELECT * FROM Test WHERE Id = '7' 
test being formed (temp1)...
Array
(
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:33:53pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 50 
executing testObject() for test id : 7 
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)

pushed test 7 into testArray
executing getFeedbacks() for testId 7 & qId 3
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: addThree, function found!
    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 7 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
the array of attempts is pushed into 'attemptArray':
Array
(
    [0] => Array
        (
            [test] => Array
                (
                    [id] => 1
                    [desc] => Quiz One
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 5
                                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                                    [topic] => Subtraction
                                    [cons] => Array
                                        (
                                            [0] => print
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => sub(3,4)=-1
                                            [1] => sub(4,3)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 50
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [1] => def strMult(s, n):
    return s*n
                    [2] => def subtract(a,b) print(a - b)
                )

            [grades] => Array
                (
                    [0] => 22
                    [1] => 44
                    [2] => 4
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => g2p colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [print]  was not found.
                            [2] => g3p colon [:] in user answer
                            [3] => g3p expecting function: strMult, function found!
                            [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => g3p constraint [print] was found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => b2p expecting function: sub, it was not found!
                            [3] => b17p user program failed to execute. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [1] => Array
        (
            [test] => Array
                (
                    [id] => 2
                    [desc] => Vector Pioneer 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 120
                            [1] => 120
                        )

                )

            [answers] => Array
                (
                    [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
                    [1] => def strMult(s, n):
    return s * n
                )

            [grades] => Array
                (
                    [0] => 21
                    [1] => 108
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g12p colon [:] in user answer
                            [1] => b12p expecting function: operation, it was not found!
                            [2] => b87p user program failed to execute. 
                        )

                    [1] => Array
                        (
                            [0] => b6p constraint [for]  was not found.
                            [1] => b6p constraint [print]  was not found.
                            [2] => g6p colon [:] in user answer
                            [3] => g6p expecting function: strMult, function found!
                            [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
                    [1] => 
                )

            [rel] => 0
        )

    [2] => Array
        (
            [test] => Array
                (
                    [id] => 4
                    [desc] => testing the new feedback system
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 6
                                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                                    [topic] => String Subtract
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 5
                                    [tests] => Array
                                        (
                                            [0] => stringSub(-3, -9)=six
                                            [1] => stringSub(9, 9)=zero
                                            [2] => stringSub(50,9)=fourty-nine
                                            [3] => stringSub(5,2)=three
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 10
                            [1] => 10
                        )

                )

            [answers] => Array
                (
                    [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
                    [1] => def addThree(a, b, c)
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 8
                    [1] => 9
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g1p colon [:] in user answer
                            [1] => g1p expecting function: stringSub, function found!
                            [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                            [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                            [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                            [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                            [6] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b1p missing colon [:] in user answer
                            [1] => g1p expecting function: addThree, function found!
                            [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                )

            [rel] => 0
        )

    [3] => Array
        (
            [test] => Array
                (
                    [id] => 5
                    [desc] => Sample Quiz
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                            [1] => 25
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

                    [1] => def stringMult(s, n):
    print s*n
                    [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
                )

            [grades] => Array
                (
                    [0] => 29
                    [1] => 21
                    [2] => 20
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: operation, function found!
                            [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                            [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [8] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b2p constraint [for]  was not found.
                            [1] => g2p constraint [print] was found.
                            [2] => g2p colon [:] in user answer
                            [3] => b2p expecting function: strMult, it was not found!
                            [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [4] => Array
        (
            [test] => Array
                (
                    [id] => 6
                    [desc] => Test Exam 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 7
                                    [desc] => Descriptionnnss
                                    [topic] => TipTop
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => while
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => a()=d
                                            [1] => a()=d
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 25
                            [2] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                    [1] => def operation(op, a, b):
    if op == '+':
        return a + b
                    [2] => return 'a'
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 10
                    [2] => 8
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: addThree, function found!
                            [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: operation, function found!
                            [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                            [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                            [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [9] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [while]  was not found.
                            [2] => b3p missing colon [:] in user answer
                            [3] => g3p expecting function: a, function found!
                            [4] => b33p user program failed to execute. 
                        )

                )

            [remarks] => Array
                (
                    [0] => New Remark for ya
                    [1] => 
                    [2] => 
                )

            [rel] => 1
        )

    [5] => Array
        (
            [test] => Array
                (
                    [id] => 7
                    [desc] => My Test
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 50
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: addThree, function found!
                            [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                )

            [rel] => 0
        )

)

+ encoded the attemptArray into JSON:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["22","44","4"],"feedback":[["b3p constraint [while]  was not found.","g2p colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [print]  was not found.","g3p colon [:] in user answer","g3p expecting function: strMult, function found!","g10p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g10p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g10p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g10p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["g3p constraint [print] was found.","b2p missing colon [:] in user answer","b2p expecting function: sub, it was not found!","b17p user program failed to execute. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}executing getAttempt()...output:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["22","44","4"],"feedback":[["b3p constraint [while]  was not found.","g2p colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [print]  was not found.","g3p colon [:] in user answer","g3p expecting function: strMult, function found!","g10p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g10p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g10p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g10p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["g3p constraint [print] was found.","b2p missing colon [:] in user answer","b2p expecting function: sub, it was not found!","b17p user program failed to execute. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}+  page accessed by getCons 2019-04-26 10:50:56pm
+ received data : 
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:50:56pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 716620
data received...
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

decoder returned an empty array of ids! go get em!
getallIds() is called!
[ + ] page accessed testB 2019-04-26 10:50:56pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:50:56pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:50:57pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:50:57pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:50:57pm
executing testObject() with testId = 2
SELECT * FROM Test WHERE Id = '2' 
test being formed (temp1)...
Array
(
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:50:57pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 120 
[ + ] page accessed quesB 2019-04-26 10:50:57pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 120 
executing testObject() for test id : 2 
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

pushed test 2 into testArray
executing getFeedbacks() for testId 2 & qId 1
Array
(
    [0] => g12p colon [:] in user answer
    [1] => b12p expecting function: operation, it was not found!
    [2] => b87p user program failed to execute. 
)

executing getFeedbacks() for testId 2 & qId 2
Array
(
    [0] => b6p constraint [for]  was not found.
    [1] => b6p constraint [print]  was not found.
    [2] => g6p colon [:] in user answer
    [3] => g6p expecting function: strMult, function found!
    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 2 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 2
            [desc] => Vector Pioneer 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 120
                    [1] => 120
                )

        )

    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:50:58pm
executing testObject() with testId = 4
SELECT * FROM Test WHERE Id = '4' 
test being formed (temp1)...
Array
(
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:50:58pm
executing quesObject() with qId = 6
obtaining testcases for qId = 6
building the ques object (temp1)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
    [tests] => Array
        (
            [0] => stringSub(-3, -9)=six
            [1] => stringSub(9, 9)=zero
            [2] => stringSub(50,9)=fourty-nine
            [3] => stringSub(5,2)=three
        )

)
question object for test built!

obtaining points from each question id: 6 
pts for this question : 10 
[ + ] page accessed quesB 2019-04-26 10:50:58pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 10 
executing testObject() for test id : 4 
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                    [tests] => Array
                        (
                            [0] => stringSub(-3, -9)=six
                            [1] => stringSub(9, 9)=zero
                            [2] => stringSub(50,9)=fourty-nine
                            [3] => stringSub(5,2)=three
                        )

                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)

pushed test 4 into testArray
executing getFeedbacks() for testId 4 & qId 6
Array
(
    [0] => g1p colon [:] in user answer
    [1] => g1p expecting function: stringSub, function found!
    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
    [6] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 4 & qId 3
Array
(
    [0] => b1p missing colon [:] in user answer
    [1] => g1p expecting function: addThree, function found!
    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 4 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 4
            [desc] => testing the new feedback system
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 6
                            [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                            [topic] => String Subtract
                            [cons] => Array
                                (
                                )

                            [diff] => 5
                            [tests] => Array
                                (
                                    [0] => stringSub(-3, -9)=six
                                    [1] => stringSub(9, 9)=zero
                                    [2] => stringSub(50,9)=fourty-nine
                                    [3] => stringSub(5,2)=three
                                )

                        )

                    [1] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 10
                    [1] => 10
                )

        )

    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:50:58pm
executing testObject() with testId = 5
SELECT * FROM Test WHERE Id = '5' 
test being formed (temp1)...
Array
(
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:50:58pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:50:58pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:50:58pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
executing testObject() for test id : 5 
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)

pushed test 5 into testArray
executing getFeedbacks() for testId 5 & qId 1
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: operation, function found!
    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 2
Array
(
    [0] => b2p constraint [for]  was not found.
    [1] => g2p constraint [print] was found.
    [2] => g2p colon [:] in user answer
    [3] => b2p expecting function: strMult, it was not found!
    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => b2p missing colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 5 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 5
            [desc] => Sample Quiz
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                    [1] => 25
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:50:59pm
executing testObject() with testId = 6
SELECT * FROM Test WHERE Id = '6' 
test being formed (temp1)...
Array
(
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:50:59pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:50:59pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:50:59pm
executing quesObject() with qId = 7
obtaining testcases for qId = 7
building the ques object (temp1)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => a()=d
            [1] => a()=d
        )

)
question object for test built!

obtaining points from each question id: 7 
pts for this question : 50 
executing testObject() for test id : 6 
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => a()=d
                            [1] => a()=d
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)

pushed test 6 into testArray
executing getFeedbacks() for testId 6 & qId 3
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: addThree, function found!
    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 1
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: operation, function found!
    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [9] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 7
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [while]  was not found.
    [2] => b3p missing colon [:] in user answer
    [3] => g3p expecting function: a, function found!
    [4] => b33p user program failed to execute. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

executing ansObject() for test id : 6 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 6
            [desc] => Test Exam 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                    [1] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [2] => Array
                        (
                            [id] => 7
                            [desc] => Descriptionnnss
                            [topic] => TipTop
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => while
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => a()=d
                                    [1] => a()=d
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 25
                    [2] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:51:00pm
executing testObject() with testId = 7
SELECT * FROM Test WHERE Id = '7' 
test being formed (temp1)...
Array
(
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:51:00pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 50 
executing testObject() for test id : 7 
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)

pushed test 7 into testArray
executing getFeedbacks() for testId 7 & qId 3
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: addThree, function found!
    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 7 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
the array of attempts is pushed into 'attemptArray':
Array
(
    [0] => Array
        (
            [test] => Array
                (
                    [id] => 1
                    [desc] => Quiz One
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 5
                                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                                    [topic] => Subtraction
                                    [cons] => Array
                                        (
                                            [0] => print
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => sub(3,4)=-1
                                            [1] => sub(4,3)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 50
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [1] => def strMult(s, n):
    return s*n
                    [2] => def subtract(a,b) print(a - b)
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                        )

                    [1] => Array
                        (
                        )

                    [2] => Array
                        (
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [1] => Array
        (
            [test] => Array
                (
                    [id] => 2
                    [desc] => Vector Pioneer 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 120
                            [1] => 120
                        )

                )

            [answers] => Array
                (
                    [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
                    [1] => def strMult(s, n):
    return s * n
                )

            [grades] => Array
                (
                    [0] => 21
                    [1] => 108
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g12p colon [:] in user answer
                            [1] => b12p expecting function: operation, it was not found!
                            [2] => b87p user program failed to execute. 
                        )

                    [1] => Array
                        (
                            [0] => b6p constraint [for]  was not found.
                            [1] => b6p constraint [print]  was not found.
                            [2] => g6p colon [:] in user answer
                            [3] => g6p expecting function: strMult, function found!
                            [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
                    [1] => 
                )

            [rel] => 0
        )

    [2] => Array
        (
            [test] => Array
                (
                    [id] => 4
                    [desc] => testing the new feedback system
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 6
                                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                                    [topic] => String Subtract
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 5
                                    [tests] => Array
                                        (
                                            [0] => stringSub(-3, -9)=six
                                            [1] => stringSub(9, 9)=zero
                                            [2] => stringSub(50,9)=fourty-nine
                                            [3] => stringSub(5,2)=three
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 10
                            [1] => 10
                        )

                )

            [answers] => Array
                (
                    [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
                    [1] => def addThree(a, b, c)
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 8
                    [1] => 9
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g1p colon [:] in user answer
                            [1] => g1p expecting function: stringSub, function found!
                            [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                            [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                            [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                            [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                            [6] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b1p missing colon [:] in user answer
                            [1] => g1p expecting function: addThree, function found!
                            [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                )

            [rel] => 0
        )

    [3] => Array
        (
            [test] => Array
                (
                    [id] => 5
                    [desc] => Sample Quiz
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                            [1] => 25
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

                    [1] => def stringMult(s, n):
    print s*n
                    [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
                )

            [grades] => Array
                (
                    [0] => 29
                    [1] => 21
                    [2] => 20
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: operation, function found!
                            [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                            [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [8] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b2p constraint [for]  was not found.
                            [1] => g2p constraint [print] was found.
                            [2] => g2p colon [:] in user answer
                            [3] => b2p expecting function: strMult, it was not found!
                            [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [4] => Array
        (
            [test] => Array
                (
                    [id] => 6
                    [desc] => Test Exam 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 7
                                    [desc] => Descriptionnnss
                                    [topic] => TipTop
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => while
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => a()=d
                                            [1] => a()=d
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 25
                            [2] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                    [1] => def operation(op, a, b):
    if op == '+':
        return a + b
                    [2] => return 'a'
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 10
                    [2] => 8
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: addThree, function found!
                            [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: operation, function found!
                            [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                            [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                            [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [9] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [while]  was not found.
                            [2] => b3p missing colon [:] in user answer
                            [3] => g3p expecting function: a, function found!
                            [4] => b33p user program failed to execute. 
                        )

                )

            [remarks] => Array
                (
                    [0] => New Remark for ya
                    [1] => 
                    [2] => 
                )

            [rel] => 1
        )

    [5] => Array
        (
            [test] => Array
                (
                    [id] => 7
                    [desc] => My Test
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 50
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: addThree, function found!
                            [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                )

            [rel] => 0
        )

)

+ encoded the attemptArray into JSON:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["25","50","25"],"feedback":[[],[],[]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}executing getAttempt()...output:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["25","50","25"],"feedback":[[],[],[]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}+  page accessed by getCons 2019-04-26 10:51:02pm
+ received data : 
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:51:02pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 868135
data received...
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

decoder returned an empty array of ids! go get em!
getallIds() is called!
[ + ] page accessed testB 2019-04-26 10:51:02pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:51:02pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:51:03pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:51:03pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:51:03pm
executing testObject() with testId = 2
SELECT * FROM Test WHERE Id = '2' 
test being formed (temp1)...
Array
(
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:51:04pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 120 
[ + ] page accessed quesB 2019-04-26 10:51:04pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 120 
executing testObject() for test id : 2 
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

pushed test 2 into testArray
executing getFeedbacks() for testId 2 & qId 1
Array
(
    [0] => g12p colon [:] in user answer
    [1] => b12p expecting function: operation, it was not found!
    [2] => b87p user program failed to execute. 
)

executing getFeedbacks() for testId 2 & qId 2
Array
(
    [0] => b6p constraint [for]  was not found.
    [1] => b6p constraint [print]  was not found.
    [2] => g6p colon [:] in user answer
    [3] => g6p expecting function: strMult, function found!
    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 2 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 2
            [desc] => Vector Pioneer 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 120
                    [1] => 120
                )

        )

    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:51:04pm
executing testObject() with testId = 4
SELECT * FROM Test WHERE Id = '4' 
test being formed (temp1)...
Array
(
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:51:04pm
executing quesObject() with qId = 6
obtaining testcases for qId = 6
building the ques object (temp1)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
    [tests] => Array
        (
            [0] => stringSub(-3, -9)=six
            [1] => stringSub(9, 9)=zero
            [2] => stringSub(50,9)=fourty-nine
            [3] => stringSub(5,2)=three
        )

)
question object for test built!

obtaining points from each question id: 6 
pts for this question : 10 
[ + ] page accessed quesB 2019-04-26 10:51:04pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 10 
executing testObject() for test id : 4 
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                    [tests] => Array
                        (
                            [0] => stringSub(-3, -9)=six
                            [1] => stringSub(9, 9)=zero
                            [2] => stringSub(50,9)=fourty-nine
                            [3] => stringSub(5,2)=three
                        )

                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)

pushed test 4 into testArray
executing getFeedbacks() for testId 4 & qId 6
Array
(
    [0] => g1p colon [:] in user answer
    [1] => g1p expecting function: stringSub, function found!
    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
    [6] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 4 & qId 3
Array
(
    [0] => b1p missing colon [:] in user answer
    [1] => g1p expecting function: addThree, function found!
    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 4 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 4
            [desc] => testing the new feedback system
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 6
                            [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                            [topic] => String Subtract
                            [cons] => Array
                                (
                                )

                            [diff] => 5
                            [tests] => Array
                                (
                                    [0] => stringSub(-3, -9)=six
                                    [1] => stringSub(9, 9)=zero
                                    [2] => stringSub(50,9)=fourty-nine
                                    [3] => stringSub(5,2)=three
                                )

                        )

                    [1] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 10
                    [1] => 10
                )

        )

    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:51:05pm
executing testObject() with testId = 5
SELECT * FROM Test WHERE Id = '5' 
test being formed (temp1)...
Array
(
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:51:05pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:51:05pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:51:05pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
executing testObject() for test id : 5 
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)

pushed test 5 into testArray
executing getFeedbacks() for testId 5 & qId 1
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: operation, function found!
    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 2
Array
(
    [0] => b2p constraint [for]  was not found.
    [1] => g2p constraint [print] was found.
    [2] => g2p colon [:] in user answer
    [3] => b2p expecting function: strMult, it was not found!
    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => b2p missing colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 5 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 5
            [desc] => Sample Quiz
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                    [1] => 25
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:51:06pm
executing testObject() with testId = 6
SELECT * FROM Test WHERE Id = '6' 
test being formed (temp1)...
Array
(
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:51:06pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:51:06pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:51:06pm
executing quesObject() with qId = 7
obtaining testcases for qId = 7
building the ques object (temp1)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => a()=d
            [1] => a()=d
        )

)
question object for test built!

obtaining points from each question id: 7 
pts for this question : 50 
executing testObject() for test id : 6 
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => a()=d
                            [1] => a()=d
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)

pushed test 6 into testArray
executing getFeedbacks() for testId 6 & qId 3
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: addThree, function found!
    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 1
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: operation, function found!
    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [9] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 7
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [while]  was not found.
    [2] => b3p missing colon [:] in user answer
    [3] => g3p expecting function: a, function found!
    [4] => b33p user program failed to execute. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

executing ansObject() for test id : 6 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 6
            [desc] => Test Exam 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                    [1] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [2] => Array
                        (
                            [id] => 7
                            [desc] => Descriptionnnss
                            [topic] => TipTop
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => while
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => a()=d
                                    [1] => a()=d
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 25
                    [2] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:51:07pm
executing testObject() with testId = 7
SELECT * FROM Test WHERE Id = '7' 
test being formed (temp1)...
Array
(
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:51:07pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 50 
executing testObject() for test id : 7 
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)

pushed test 7 into testArray
executing getFeedbacks() for testId 7 & qId 3
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: addThree, function found!
    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 7 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
the array of attempts is pushed into 'attemptArray':
Array
(
    [0] => Array
        (
            [test] => Array
                (
                    [id] => 1
                    [desc] => Quiz One
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 5
                                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                                    [topic] => Subtraction
                                    [cons] => Array
                                        (
                                            [0] => print
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => sub(3,4)=-1
                                            [1] => sub(4,3)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 50
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [1] => def strMult(s, n):
    return s*n
                    [2] => def subtract(a,b) print(a - b)
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                        )

                    [1] => Array
                        (
                        )

                    [2] => Array
                        (
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [1] => Array
        (
            [test] => Array
                (
                    [id] => 2
                    [desc] => Vector Pioneer 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 120
                            [1] => 120
                        )

                )

            [answers] => Array
                (
                    [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
                    [1] => def strMult(s, n):
    return s * n
                )

            [grades] => Array
                (
                    [0] => 21
                    [1] => 108
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g12p colon [:] in user answer
                            [1] => b12p expecting function: operation, it was not found!
                            [2] => b87p user program failed to execute. 
                        )

                    [1] => Array
                        (
                            [0] => b6p constraint [for]  was not found.
                            [1] => b6p constraint [print]  was not found.
                            [2] => g6p colon [:] in user answer
                            [3] => g6p expecting function: strMult, function found!
                            [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
                    [1] => 
                )

            [rel] => 0
        )

    [2] => Array
        (
            [test] => Array
                (
                    [id] => 4
                    [desc] => testing the new feedback system
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 6
                                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                                    [topic] => String Subtract
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 5
                                    [tests] => Array
                                        (
                                            [0] => stringSub(-3, -9)=six
                                            [1] => stringSub(9, 9)=zero
                                            [2] => stringSub(50,9)=fourty-nine
                                            [3] => stringSub(5,2)=three
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 10
                            [1] => 10
                        )

                )

            [answers] => Array
                (
                    [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
                    [1] => def addThree(a, b, c)
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 8
                    [1] => 9
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g1p colon [:] in user answer
                            [1] => g1p expecting function: stringSub, function found!
                            [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                            [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                            [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                            [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                            [6] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b1p missing colon [:] in user answer
                            [1] => g1p expecting function: addThree, function found!
                            [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                )

            [rel] => 0
        )

    [3] => Array
        (
            [test] => Array
                (
                    [id] => 5
                    [desc] => Sample Quiz
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                            [1] => 25
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

                    [1] => def stringMult(s, n):
    print s*n
                    [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
                )

            [grades] => Array
                (
                    [0] => 29
                    [1] => 21
                    [2] => 20
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: operation, function found!
                            [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                            [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [8] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b2p constraint [for]  was not found.
                            [1] => g2p constraint [print] was found.
                            [2] => g2p colon [:] in user answer
                            [3] => b2p expecting function: strMult, it was not found!
                            [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [4] => Array
        (
            [test] => Array
                (
                    [id] => 6
                    [desc] => Test Exam 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 7
                                    [desc] => Descriptionnnss
                                    [topic] => TipTop
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => while
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => a()=d
                                            [1] => a()=d
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 25
                            [2] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                    [1] => def operation(op, a, b):
    if op == '+':
        return a + b
                    [2] => return 'a'
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 10
                    [2] => 8
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: addThree, function found!
                            [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: operation, function found!
                            [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                            [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                            [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [9] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [while]  was not found.
                            [2] => b3p missing colon [:] in user answer
                            [3] => g3p expecting function: a, function found!
                            [4] => b33p user program failed to execute. 
                        )

                )

            [remarks] => Array
                (
                    [0] => New Remark for ya
                    [1] => 
                    [2] => 
                )

            [rel] => 1
        )

    [5] => Array
        (
            [test] => Array
                (
                    [id] => 7
                    [desc] => My Test
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 50
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: addThree, function found!
                            [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                )

            [rel] => 0
        )

)

+ encoded the attemptArray into JSON:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["25","50","25"],"feedback":[[],[],[]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}executing getAttempt()...output:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["25","50","25"],"feedback":[[],[],[]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}+  page accessed by getCons 2019-04-26 10:52:15pm
+ received data : 
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:52:15pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 1019650
data received...
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

decoder returned an empty array of ids! go get em!
getallIds() is called!
[ + ] page accessed testB 2019-04-26 10:52:15pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:52:16pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:52:16pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:52:16pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

    [feedback] => Array
        (
            [0] => Array
                (
                )

            [1] => Array
                (
                )

            [2] => Array
                (
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:52:16pm
executing testObject() with testId = 2
SELECT * FROM Test WHERE Id = '2' 
test being formed (temp1)...
Array
(
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:52:17pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 120 
[ + ] page accessed quesB 2019-04-26 10:52:17pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 120 
executing testObject() for test id : 2 
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

pushed test 2 into testArray
executing getFeedbacks() for testId 2 & qId 1
Array
(
    [0] => g12p colon [:] in user answer
    [1] => b12p expecting function: operation, it was not found!
    [2] => b87p user program failed to execute. 
)

executing getFeedbacks() for testId 2 & qId 2
Array
(
    [0] => b6p constraint [for]  was not found.
    [1] => b6p constraint [print]  was not found.
    [2] => g6p colon [:] in user answer
    [3] => g6p expecting function: strMult, function found!
    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 2 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 2
            [desc] => Vector Pioneer 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 120
                    [1] => 120
                )

        )

    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:52:17pm
executing testObject() with testId = 4
SELECT * FROM Test WHERE Id = '4' 
test being formed (temp1)...
Array
(
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:52:17pm
executing quesObject() with qId = 6
obtaining testcases for qId = 6
building the ques object (temp1)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
    [tests] => Array
        (
            [0] => stringSub(-3, -9)=six
            [1] => stringSub(9, 9)=zero
            [2] => stringSub(50,9)=fourty-nine
            [3] => stringSub(5,2)=three
        )

)
question object for test built!

obtaining points from each question id: 6 
pts for this question : 10 
[ + ] page accessed quesB 2019-04-26 10:52:17pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 10 
executing testObject() for test id : 4 
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                    [tests] => Array
                        (
                            [0] => stringSub(-3, -9)=six
                            [1] => stringSub(9, 9)=zero
                            [2] => stringSub(50,9)=fourty-nine
                            [3] => stringSub(5,2)=three
                        )

                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)

pushed test 4 into testArray
executing getFeedbacks() for testId 4 & qId 6
Array
(
    [0] => g1p colon [:] in user answer
    [1] => g1p expecting function: stringSub, function found!
    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
    [6] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 4 & qId 3
Array
(
    [0] => b1p missing colon [:] in user answer
    [1] => g1p expecting function: addThree, function found!
    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 4 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 4
            [desc] => testing the new feedback system
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 6
                            [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                            [topic] => String Subtract
                            [cons] => Array
                                (
                                )

                            [diff] => 5
                            [tests] => Array
                                (
                                    [0] => stringSub(-3, -9)=six
                                    [1] => stringSub(9, 9)=zero
                                    [2] => stringSub(50,9)=fourty-nine
                                    [3] => stringSub(5,2)=three
                                )

                        )

                    [1] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 10
                    [1] => 10
                )

        )

    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:52:18pm
executing testObject() with testId = 5
SELECT * FROM Test WHERE Id = '5' 
test being formed (temp1)...
Array
(
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:52:18pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:52:18pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:52:18pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
executing testObject() for test id : 5 
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)

pushed test 5 into testArray
executing getFeedbacks() for testId 5 & qId 1
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: operation, function found!
    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 2
Array
(
    [0] => b2p constraint [for]  was not found.
    [1] => g2p constraint [print] was found.
    [2] => g2p colon [:] in user answer
    [3] => b2p expecting function: strMult, it was not found!
    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => b2p missing colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 5 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 5
            [desc] => Sample Quiz
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                    [1] => 25
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:52:18pm
executing testObject() with testId = 6
SELECT * FROM Test WHERE Id = '6' 
test being formed (temp1)...
Array
(
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:52:18pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:52:18pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:52:18pm
executing quesObject() with qId = 7
obtaining testcases for qId = 7
building the ques object (temp1)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => a()=d
            [1] => a()=d
        )

)
question object for test built!

obtaining points from each question id: 7 
pts for this question : 50 
executing testObject() for test id : 6 
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => a()=d
                            [1] => a()=d
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)

pushed test 6 into testArray
executing getFeedbacks() for testId 6 & qId 3
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: addThree, function found!
    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 1
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: operation, function found!
    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [9] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 7
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [while]  was not found.
    [2] => b3p missing colon [:] in user answer
    [3] => g3p expecting function: a, function found!
    [4] => b33p user program failed to execute. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

executing ansObject() for test id : 6 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 6
            [desc] => Test Exam 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                    [1] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [2] => Array
                        (
                            [id] => 7
                            [desc] => Descriptionnnss
                            [topic] => TipTop
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => while
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => a()=d
                                    [1] => a()=d
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 25
                    [2] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:52:18pm
executing testObject() with testId = 7
SELECT * FROM Test WHERE Id = '7' 
test being formed (temp1)...
Array
(
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:52:18pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 50 
executing testObject() for test id : 7 
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)

pushed test 7 into testArray
executing getFeedbacks() for testId 7 & qId 3
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: addThree, function found!
    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 7 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
the array of attempts is pushed into 'attemptArray':
Array
(
    [0] => Array
        (
            [test] => Array
                (
                    [id] => 1
                    [desc] => Quiz One
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 5
                                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                                    [topic] => Subtraction
                                    [cons] => Array
                                        (
                                            [0] => print
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => sub(3,4)=-1
                                            [1] => sub(4,3)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 50
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [1] => def strMult(s, n):
    return s*n
                    [2] => def subtract(a,b) print(a - b)
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                        )

                    [1] => Array
                        (
                        )

                    [2] => Array
                        (
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [1] => Array
        (
            [test] => Array
                (
                    [id] => 2
                    [desc] => Vector Pioneer 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 120
                            [1] => 120
                        )

                )

            [answers] => Array
                (
                    [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
                    [1] => def strMult(s, n):
    return s * n
                )

            [grades] => Array
                (
                    [0] => 21
                    [1] => 108
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g12p colon [:] in user answer
                            [1] => b12p expecting function: operation, it was not found!
                            [2] => b87p user program failed to execute. 
                        )

                    [1] => Array
                        (
                            [0] => b6p constraint [for]  was not found.
                            [1] => b6p constraint [print]  was not found.
                            [2] => g6p colon [:] in user answer
                            [3] => g6p expecting function: strMult, function found!
                            [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
                    [1] => 
                )

            [rel] => 0
        )

    [2] => Array
        (
            [test] => Array
                (
                    [id] => 4
                    [desc] => testing the new feedback system
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 6
                                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                                    [topic] => String Subtract
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 5
                                    [tests] => Array
                                        (
                                            [0] => stringSub(-3, -9)=six
                                            [1] => stringSub(9, 9)=zero
                                            [2] => stringSub(50,9)=fourty-nine
                                            [3] => stringSub(5,2)=three
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 10
                            [1] => 10
                        )

                )

            [answers] => Array
                (
                    [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
                    [1] => def addThree(a, b, c)
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 8
                    [1] => 9
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g1p colon [:] in user answer
                            [1] => g1p expecting function: stringSub, function found!
                            [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                            [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                            [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                            [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                            [6] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b1p missing colon [:] in user answer
                            [1] => g1p expecting function: addThree, function found!
                            [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                )

            [rel] => 0
        )

    [3] => Array
        (
            [test] => Array
                (
                    [id] => 5
                    [desc] => Sample Quiz
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                            [1] => 25
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

                    [1] => def stringMult(s, n):
    print s*n
                    [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
                )

            [grades] => Array
                (
                    [0] => 29
                    [1] => 21
                    [2] => 20
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: operation, function found!
                            [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                            [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [8] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b2p constraint [for]  was not found.
                            [1] => g2p constraint [print] was found.
                            [2] => g2p colon [:] in user answer
                            [3] => b2p expecting function: strMult, it was not found!
                            [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [4] => Array
        (
            [test] => Array
                (
                    [id] => 6
                    [desc] => Test Exam 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 7
                                    [desc] => Descriptionnnss
                                    [topic] => TipTop
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => while
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => a()=d
                                            [1] => a()=d
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 25
                            [2] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                    [1] => def operation(op, a, b):
    if op == '+':
        return a + b
                    [2] => return 'a'
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 10
                    [2] => 8
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: addThree, function found!
                            [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: operation, function found!
                            [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                            [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                            [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [9] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [while]  was not found.
                            [2] => b3p missing colon [:] in user answer
                            [3] => g3p expecting function: a, function found!
                            [4] => b33p user program failed to execute. 
                        )

                )

            [remarks] => Array
                (
                    [0] => New Remark for ya
                    [1] => 
                    [2] => 
                )

            [rel] => 1
        )

    [5] => Array
        (
            [test] => Array
                (
                    [id] => 7
                    [desc] => My Test
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 50
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: addThree, function found!
                            [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                )

            [rel] => 0
        )

)

+ encoded the attemptArray into JSON:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["25","50","25"],"feedback":[[],[],[]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}executing getAttempt()...output:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["25","50","25"],"feedback":[[],[],[]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}+  page accessed by getCons 2019-04-26 10:52:30pm
+ received data : 
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:52:30pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 1171166
data received...
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

decoder returned an empty array of ids! go get em!
getallIds() is called!
[ + ] page accessed testB 2019-04-26 10:52:30pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:52:30pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:52:30pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:52:31pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => g2p colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [print]  was not found.
    [2] => g3p colon [:] in user answer
    [3] => g3p expecting function: strMult, function found!
    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
    [0] => g3p constraint [print] was found.
    [1] => b2p missing colon [:] in user answer
    [2] => b2p expecting function: sub, it was not found!
    [3] => g10p python called sub(3,4), expected: -1, got user answer [-1]
    [4] => g10p python called sub(4,3), expected: 1, got user answer [1]
    [5] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 22
            [1] => 44
            [2] => 21
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => g2p colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [print]  was not found.
                    [2] => g3p colon [:] in user answer
                    [3] => g3p expecting function: strMult, function found!
                    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => g3p constraint [print] was found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => b2p expecting function: sub, it was not found!
                    [3] => g10p python called sub(3,4), expected: -1, got user answer [-1]
                    [4] => g10p python called sub(4,3), expected: 1, got user answer [1]
                    [5] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 22
            [1] => 44
            [2] => 21
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => g2p colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [print]  was not found.
                    [2] => g3p colon [:] in user answer
                    [3] => g3p expecting function: strMult, function found!
                    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => g3p constraint [print] was found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => b2p expecting function: sub, it was not found!
                    [3] => g10p python called sub(3,4), expected: -1, got user answer [-1]
                    [4] => g10p python called sub(4,3), expected: 1, got user answer [1]
                    [5] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 22
            [1] => 44
            [2] => 21
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => g2p colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [print]  was not found.
                    [2] => g3p colon [:] in user answer
                    [3] => g3p expecting function: strMult, function found!
                    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => g3p constraint [print] was found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => b2p expecting function: sub, it was not found!
                    [3] => g10p python called sub(3,4), expected: -1, got user answer [-1]
                    [4] => g10p python called sub(4,3), expected: 1, got user answer [1]
                    [5] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:52:31pm
executing testObject() with testId = 2
SELECT * FROM Test WHERE Id = '2' 
test being formed (temp1)...
Array
(
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:52:31pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 120 
[ + ] page accessed quesB 2019-04-26 10:52:31pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 120 
executing testObject() for test id : 2 
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

pushed test 2 into testArray
executing getFeedbacks() for testId 2 & qId 1
Array
(
    [0] => g12p colon [:] in user answer
    [1] => b12p expecting function: operation, it was not found!
    [2] => b87p user program failed to execute. 
)

executing getFeedbacks() for testId 2 & qId 2
Array
(
    [0] => b6p constraint [for]  was not found.
    [1] => b6p constraint [print]  was not found.
    [2] => g6p colon [:] in user answer
    [3] => g6p expecting function: strMult, function found!
    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 2 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 2
            [desc] => Vector Pioneer 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 120
                    [1] => 120
                )

        )

    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:52:31pm
executing testObject() with testId = 4
SELECT * FROM Test WHERE Id = '4' 
test being formed (temp1)...
Array
(
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:52:31pm
executing quesObject() with qId = 6
obtaining testcases for qId = 6
building the ques object (temp1)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
    [tests] => Array
        (
            [0] => stringSub(-3, -9)=six
            [1] => stringSub(9, 9)=zero
            [2] => stringSub(50,9)=fourty-nine
            [3] => stringSub(5,2)=three
        )

)
question object for test built!

obtaining points from each question id: 6 
pts for this question : 10 
[ + ] page accessed quesB 2019-04-26 10:52:31pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 10 
executing testObject() for test id : 4 
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                    [tests] => Array
                        (
                            [0] => stringSub(-3, -9)=six
                            [1] => stringSub(9, 9)=zero
                            [2] => stringSub(50,9)=fourty-nine
                            [3] => stringSub(5,2)=three
                        )

                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)

pushed test 4 into testArray
executing getFeedbacks() for testId 4 & qId 6
Array
(
    [0] => g1p colon [:] in user answer
    [1] => g1p expecting function: stringSub, function found!
    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
    [6] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 4 & qId 3
Array
(
    [0] => b1p missing colon [:] in user answer
    [1] => g1p expecting function: addThree, function found!
    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 4 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 4
            [desc] => testing the new feedback system
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 6
                            [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                            [topic] => String Subtract
                            [cons] => Array
                                (
                                )

                            [diff] => 5
                            [tests] => Array
                                (
                                    [0] => stringSub(-3, -9)=six
                                    [1] => stringSub(9, 9)=zero
                                    [2] => stringSub(50,9)=fourty-nine
                                    [3] => stringSub(5,2)=three
                                )

                        )

                    [1] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 10
                    [1] => 10
                )

        )

    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:52:31pm
executing testObject() with testId = 5
SELECT * FROM Test WHERE Id = '5' 
test being formed (temp1)...
Array
(
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:52:31pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:52:31pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:52:32pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
executing testObject() for test id : 5 
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)

pushed test 5 into testArray
executing getFeedbacks() for testId 5 & qId 1
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: operation, function found!
    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 2
Array
(
    [0] => b2p constraint [for]  was not found.
    [1] => g2p constraint [print] was found.
    [2] => g2p colon [:] in user answer
    [3] => b2p expecting function: strMult, it was not found!
    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => b2p missing colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 5 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 5
            [desc] => Sample Quiz
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                    [1] => 25
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:52:32pm
executing testObject() with testId = 6
SELECT * FROM Test WHERE Id = '6' 
test being formed (temp1)...
Array
(
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:52:32pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:52:32pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:52:32pm
executing quesObject() with qId = 7
obtaining testcases for qId = 7
building the ques object (temp1)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => a()=d
            [1] => a()=d
        )

)
question object for test built!

obtaining points from each question id: 7 
pts for this question : 50 
executing testObject() for test id : 6 
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => a()=d
                            [1] => a()=d
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)

pushed test 6 into testArray
executing getFeedbacks() for testId 6 & qId 3
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: addThree, function found!
    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 1
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: operation, function found!
    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [9] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 7
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [while]  was not found.
    [2] => b3p missing colon [:] in user answer
    [3] => g3p expecting function: a, function found!
    [4] => b33p user program failed to execute. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

executing ansObject() for test id : 6 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 6
            [desc] => Test Exam 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                    [1] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [2] => Array
                        (
                            [id] => 7
                            [desc] => Descriptionnnss
                            [topic] => TipTop
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => while
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => a()=d
                                    [1] => a()=d
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 25
                    [2] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:52:32pm
executing testObject() with testId = 7
SELECT * FROM Test WHERE Id = '7' 
test being formed (temp1)...
Array
(
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:52:32pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 50 
executing testObject() for test id : 7 
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)

pushed test 7 into testArray
executing getFeedbacks() for testId 7 & qId 3
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: addThree, function found!
    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 7 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
the array of attempts is pushed into 'attemptArray':
Array
(
    [0] => Array
        (
            [test] => Array
                (
                    [id] => 1
                    [desc] => Quiz One
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 5
                                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                                    [topic] => Subtraction
                                    [cons] => Array
                                        (
                                            [0] => print
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => sub(3,4)=-1
                                            [1] => sub(4,3)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 50
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [1] => def strMult(s, n):
    return s*n
                    [2] => def subtract(a,b) print(a - b)
                )

            [grades] => Array
                (
                    [0] => 22
                    [1] => 44
                    [2] => 21
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => g2p colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [print]  was not found.
                            [2] => g3p colon [:] in user answer
                            [3] => g3p expecting function: strMult, function found!
                            [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => g3p constraint [print] was found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => b2p expecting function: sub, it was not found!
                            [3] => g10p python called sub(3,4), expected: -1, got user answer [-1]
                            [4] => g10p python called sub(4,3), expected: 1, got user answer [1]
                            [5] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [1] => Array
        (
            [test] => Array
                (
                    [id] => 2
                    [desc] => Vector Pioneer 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 120
                            [1] => 120
                        )

                )

            [answers] => Array
                (
                    [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
                    [1] => def strMult(s, n):
    return s * n
                )

            [grades] => Array
                (
                    [0] => 21
                    [1] => 108
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g12p colon [:] in user answer
                            [1] => b12p expecting function: operation, it was not found!
                            [2] => b87p user program failed to execute. 
                        )

                    [1] => Array
                        (
                            [0] => b6p constraint [for]  was not found.
                            [1] => b6p constraint [print]  was not found.
                            [2] => g6p colon [:] in user answer
                            [3] => g6p expecting function: strMult, function found!
                            [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
                    [1] => 
                )

            [rel] => 0
        )

    [2] => Array
        (
            [test] => Array
                (
                    [id] => 4
                    [desc] => testing the new feedback system
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 6
                                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                                    [topic] => String Subtract
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 5
                                    [tests] => Array
                                        (
                                            [0] => stringSub(-3, -9)=six
                                            [1] => stringSub(9, 9)=zero
                                            [2] => stringSub(50,9)=fourty-nine
                                            [3] => stringSub(5,2)=three
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 10
                            [1] => 10
                        )

                )

            [answers] => Array
                (
                    [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
                    [1] => def addThree(a, b, c)
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 8
                    [1] => 9
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g1p colon [:] in user answer
                            [1] => g1p expecting function: stringSub, function found!
                            [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                            [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                            [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                            [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                            [6] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b1p missing colon [:] in user answer
                            [1] => g1p expecting function: addThree, function found!
                            [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                )

            [rel] => 0
        )

    [3] => Array
        (
            [test] => Array
                (
                    [id] => 5
                    [desc] => Sample Quiz
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                            [1] => 25
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

                    [1] => def stringMult(s, n):
    print s*n
                    [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
                )

            [grades] => Array
                (
                    [0] => 29
                    [1] => 21
                    [2] => 20
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: operation, function found!
                            [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                            [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [8] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b2p constraint [for]  was not found.
                            [1] => g2p constraint [print] was found.
                            [2] => g2p colon [:] in user answer
                            [3] => b2p expecting function: strMult, it was not found!
                            [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [4] => Array
        (
            [test] => Array
                (
                    [id] => 6
                    [desc] => Test Exam 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 7
                                    [desc] => Descriptionnnss
                                    [topic] => TipTop
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => while
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => a()=d
                                            [1] => a()=d
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 25
                            [2] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                    [1] => def operation(op, a, b):
    if op == '+':
        return a + b
                    [2] => return 'a'
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 10
                    [2] => 8
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: addThree, function found!
                            [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: operation, function found!
                            [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                            [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                            [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [9] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [while]  was not found.
                            [2] => b3p missing colon [:] in user answer
                            [3] => g3p expecting function: a, function found!
                            [4] => b33p user program failed to execute. 
                        )

                )

            [remarks] => Array
                (
                    [0] => New Remark for ya
                    [1] => 
                    [2] => 
                )

            [rel] => 1
        )

    [5] => Array
        (
            [test] => Array
                (
                    [id] => 7
                    [desc] => My Test
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 50
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: addThree, function found!
                            [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                )

            [rel] => 0
        )

)

+ encoded the attemptArray into JSON:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["22","44","21"],"feedback":[["b3p constraint [while]  was not found.","g2p colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [print]  was not found.","g3p colon [:] in user answer","g3p expecting function: strMult, function found!","g10p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g10p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g10p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g10p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["g3p constraint [print] was found.","b2p missing colon [:] in user answer","b2p expecting function: sub, it was not found!","g10p python called sub(3,4), expected: -1, got user answer [-1]","g10p python called sub(4,3), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}executing getAttempt()...output:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["22","44","21"],"feedback":[["b3p constraint [while]  was not found.","g2p colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [print]  was not found.","g3p colon [:] in user answer","g3p expecting function: strMult, function found!","g10p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g10p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g10p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g10p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["g3p constraint [print] was found.","b2p missing colon [:] in user answer","b2p expecting function: sub, it was not found!","g10p python called sub(3,4), expected: -1, got user answer [-1]","g10p python called sub(4,3), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}+  page accessed by getCons 2019-04-26 10:53:20pm
+ received data : 
Array
(
    [type] => getT
    [rels] => Array
        (
            [0] => 1
        )

)

+ getCons() in backend  was succesful. data: 
[]
[ + ]  page accessed getT 2019-04-26 10:53:20pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 1334358
data received...
Array
(
    [type] => getT
    [rels] => Array
        (
            [0] => 1
        )

)
select * from questionstudentrelation where testid = 1
Array
(
    [Id] => 149
    [grade] => 0
    [rel] => 0
    [userAnswer] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
    [feedback] => 
    [points] => 22
    [maxpoints] => 25
    [testId] => 1
    [questionId] => 4
    [testName] => Quiz One
    [remarks] => 
)

Array
(
    [Id] => 150
    [grade] => 0
    [rel] => 0
    [userAnswer] => def strMult(s, n):
    return s*n
    [feedback] => 
    [points] => 44
    [maxpoints] => 50
    [testId] => 1
    [questionId] => 2
    [testName] => Quiz One
    [remarks] => 
)

Array
(
    [Id] => 151
    [grade] => 0
    [rel] => 0
    [userAnswer] => def subtract(a,b) print(a - b)
    [feedback] => 
    [points] => 21
    [maxpoints] => 25
    [testId] => 1
    [questionId] => 5
    [testName] => Quiz One
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 25
    [1] => 50
    [2] => 25
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

formed the test object...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)
select * from questionstudentrelation where testid = 2
Array
(
    [Id] => 155
    [grade] => 0
    [rel] => 0
    [userAnswer] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
    [feedback] => 
    [points] => 21
    [maxpoints] => 120
    [testId] => 2
    [questionId] => 1
    [testName] => Vector Pioneer 2
    [remarks] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
)

Array
(
    [Id] => 156
    [grade] => 0
    [rel] => 0
    [userAnswer] => def strMult(s, n):
    return s * n
    [feedback] => 
    [points] => 108
    [maxpoints] => 120
    [testId] => 2
    [questionId] => 2
    [testName] => Vector Pioneer 2
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 120
    [1] => 120
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

formed the test object...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)
select * from questionstudentrelation where testid = 4
Array
(
    [Id] => 159
    [grade] => 0
    [rel] => 0
    [userAnswer] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
    [feedback] => 
    [points] => 8
    [maxpoints] => 10
    [testId] => 4
    [questionId] => 6
    [testName] => testing the new feedback system
    [remarks] => 
)

Array
(
    [Id] => 160
    [grade] => 0
    [rel] => 0
    [userAnswer] => def addThree(a, b, c)
    return a + b + c
    [feedback] => 
    [points] => 9
    [maxpoints] => 10
    [testId] => 4
    [questionId] => 3
    [testName] => testing the new feedback system
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 10
    [1] => 10
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)

formed the test object...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)
select * from questionstudentrelation where testid = 5
Array
(
    [Id] => 161
    [grade] => 31
    [rel] => 0
    [userAnswer] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

    [feedback] => 
    [points] => 29
    [maxpoints] => 50
    [testId] => 5
    [questionId] => 1
    [testName] => Sample Quiz
    [remarks] => 
)

Array
(
    [Id] => 162
    [grade] => 0
    [rel] => 0
    [userAnswer] => def stringMult(s, n):
    print s*n
    [feedback] => 
    [points] => 21
    [maxpoints] => 25
    [testId] => 5
    [questionId] => 2
    [testName] => Sample Quiz
    [remarks] => 
)

Array
(
    [Id] => 163
    [grade] => 0
    [rel] => 0
    [userAnswer] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
    [feedback] => 
    [points] => 20
    [maxpoints] => 25
    [testId] => 5
    [questionId] => 4
    [testName] => Sample Quiz
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 50
    [1] => 25
    [2] => 25
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)

formed the test object...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)
select * from questionstudentrelation where testid = 6
Array
(
    [Id] => 164
    [grade] => 0
    [rel] => 1
    [userAnswer] => def addThree(a, b, c):
    return a + b + c
    [feedback] => 
    [points] => 25
    [maxpoints] => 25
    [testId] => 6
    [questionId] => 3
    [testName] => Test Exam 2
    [remarks] => New Remark for ya
)

Array
(
    [Id] => 165
    [grade] => 0
    [rel] => 1
    [userAnswer] => def operation(op, a, b):
    if op == '+':
        return a + b
    [feedback] => 
    [points] => 10
    [maxpoints] => 25
    [testId] => 6
    [questionId] => 1
    [testName] => Test Exam 2
    [remarks] => 
)

Array
(
    [Id] => 166
    [grade] => 0
    [rel] => 1
    [userAnswer] => return 'a'
    [feedback] => 
    [points] => 8
    [maxpoints] => 50
    [testId] => 6
    [questionId] => 7
    [testName] => Test Exam 2
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 25
    [1] => 25
    [2] => 50
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)

formed the test object...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)
select * from questionstudentrelation where testid = 7
Array
(
    [Id] => 167
    [grade] => 170
    [rel] => 0
    [userAnswer] => def addThree(a, b, c):
    return a + b + c
    [feedback] => 
    [points] => 50
    [maxpoints] => 50
    [testId] => 7
    [questionId] => 3
    [testName] => My Test
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 50
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)

formed the test object...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)
running getExam()...output:
{"type":"getT","error":"0","tests":[{"id":"1","desc":"Quiz One","rel":1,"sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4"},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3"},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1"}],"pts":["25","50","25"]},{"id":"2","desc":"Vector Pioneer 2","rel":1,"sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2"},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3"}],"pts":["120","120"]},{"id":"4","desc":"testing the new feedback system","rel":1,"sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5"},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1"}],"pts":["10","10"]},{"id":"5","desc":"Sample Quiz","rel":1,"sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2"},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3"},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4"}],"pts":["50","25","25"]},{"id":"6","desc":"Test Exam 2","rel":1,"sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1"},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2"},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2"}],"pts":["25","25","50"]},{"id":"7","desc":"My Test","rel":1,"sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1"}],"pts":["50"]}]}+  page accessed by getCons 2019-04-26 10:53:25pm
+ received data : 
Array
(
    [type] => getT
    [rels] => Array
        (
            [0] => 1
        )

)

+ getCons() in backend  was succesful. data: 
[]
[ + ]  page accessed getT 2019-04-26 10:53:25pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 1376022
data received...
Array
(
    [type] => getT
    [rels] => Array
        (
            [0] => 1
        )

)
select * from questionstudentrelation where testid = 1
Array
(
    [Id] => 149
    [grade] => 0
    [rel] => 0
    [userAnswer] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
    [feedback] => 
    [points] => 22
    [maxpoints] => 25
    [testId] => 1
    [questionId] => 4
    [testName] => Quiz One
    [remarks] => 
)

Array
(
    [Id] => 150
    [grade] => 0
    [rel] => 0
    [userAnswer] => def strMult(s, n):
    return s*n
    [feedback] => 
    [points] => 44
    [maxpoints] => 50
    [testId] => 1
    [questionId] => 2
    [testName] => Quiz One
    [remarks] => 
)

Array
(
    [Id] => 151
    [grade] => 0
    [rel] => 0
    [userAnswer] => def subtract(a,b) print(a - b)
    [feedback] => 
    [points] => 21
    [maxpoints] => 25
    [testId] => 1
    [questionId] => 5
    [testName] => Quiz One
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 25
    [1] => 50
    [2] => 25
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

formed the test object...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)
select * from questionstudentrelation where testid = 2
Array
(
    [Id] => 155
    [grade] => 0
    [rel] => 0
    [userAnswer] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
    [feedback] => 
    [points] => 21
    [maxpoints] => 120
    [testId] => 2
    [questionId] => 1
    [testName] => Vector Pioneer 2
    [remarks] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
)

Array
(
    [Id] => 156
    [grade] => 0
    [rel] => 0
    [userAnswer] => def strMult(s, n):
    return s * n
    [feedback] => 
    [points] => 108
    [maxpoints] => 120
    [testId] => 2
    [questionId] => 2
    [testName] => Vector Pioneer 2
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 120
    [1] => 120
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

formed the test object...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)
select * from questionstudentrelation where testid = 4
Array
(
    [Id] => 159
    [grade] => 0
    [rel] => 0
    [userAnswer] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
    [feedback] => 
    [points] => 8
    [maxpoints] => 10
    [testId] => 4
    [questionId] => 6
    [testName] => testing the new feedback system
    [remarks] => 
)

Array
(
    [Id] => 160
    [grade] => 0
    [rel] => 0
    [userAnswer] => def addThree(a, b, c)
    return a + b + c
    [feedback] => 
    [points] => 9
    [maxpoints] => 10
    [testId] => 4
    [questionId] => 3
    [testName] => testing the new feedback system
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 10
    [1] => 10
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)

formed the test object...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)
select * from questionstudentrelation where testid = 5
Array
(
    [Id] => 161
    [grade] => 31
    [rel] => 0
    [userAnswer] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

    [feedback] => 
    [points] => 29
    [maxpoints] => 50
    [testId] => 5
    [questionId] => 1
    [testName] => Sample Quiz
    [remarks] => 
)

Array
(
    [Id] => 162
    [grade] => 0
    [rel] => 0
    [userAnswer] => def stringMult(s, n):
    print s*n
    [feedback] => 
    [points] => 21
    [maxpoints] => 25
    [testId] => 5
    [questionId] => 2
    [testName] => Sample Quiz
    [remarks] => 
)

Array
(
    [Id] => 163
    [grade] => 0
    [rel] => 0
    [userAnswer] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
    [feedback] => 
    [points] => 20
    [maxpoints] => 25
    [testId] => 5
    [questionId] => 4
    [testName] => Sample Quiz
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 50
    [1] => 25
    [2] => 25
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)

formed the test object...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)
select * from questionstudentrelation where testid = 6
Array
(
    [Id] => 164
    [grade] => 0
    [rel] => 1
    [userAnswer] => def addThree(a, b, c):
    return a + b + c
    [feedback] => 
    [points] => 25
    [maxpoints] => 25
    [testId] => 6
    [questionId] => 3
    [testName] => Test Exam 2
    [remarks] => New Remark for ya
)

Array
(
    [Id] => 165
    [grade] => 0
    [rel] => 1
    [userAnswer] => def operation(op, a, b):
    if op == '+':
        return a + b
    [feedback] => 
    [points] => 10
    [maxpoints] => 25
    [testId] => 6
    [questionId] => 1
    [testName] => Test Exam 2
    [remarks] => 
)

Array
(
    [Id] => 166
    [grade] => 0
    [rel] => 1
    [userAnswer] => return 'a'
    [feedback] => 
    [points] => 8
    [maxpoints] => 50
    [testId] => 6
    [questionId] => 7
    [testName] => Test Exam 2
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 25
    [1] => 25
    [2] => 50
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)

formed the test object...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)
select * from questionstudentrelation where testid = 7
Array
(
    [Id] => 167
    [grade] => 170
    [rel] => 0
    [userAnswer] => def addThree(a, b, c):
    return a + b + c
    [feedback] => 
    [points] => 50
    [maxpoints] => 50
    [testId] => 7
    [questionId] => 3
    [testName] => My Test
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 50
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)

formed the test object...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)
running getExam()...output:
{"type":"getT","error":"0","tests":[{"id":"1","desc":"Quiz One","rel":1,"sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4"},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3"},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1"}],"pts":["25","50","25"]},{"id":"2","desc":"Vector Pioneer 2","rel":1,"sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2"},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3"}],"pts":["120","120"]},{"id":"4","desc":"testing the new feedback system","rel":1,"sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5"},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1"}],"pts":["10","10"]},{"id":"5","desc":"Sample Quiz","rel":1,"sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2"},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3"},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4"}],"pts":["50","25","25"]},{"id":"6","desc":"Test Exam 2","rel":1,"sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1"},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2"},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2"}],"pts":["25","25","50"]},{"id":"7","desc":"My Test","rel":1,"sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1"}],"pts":["50"]}]}+  page accessed by getCons 2019-04-26 10:53:36pm
+ received data : 
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

+ getCons() in backend  was succesful. data: 
[]
[ + ] page accessed getA 2019-04-26 10:53:36pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 1417664
data received...
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

decoder returned an empty array of ids! go get em!
getallIds() is called!
[ + ] page accessed testB 2019-04-26 10:53:36pm
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:53:36pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:53:36pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:53:36pm
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [cons] => Array
        (
            [0] => print
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)=-1
            [1] => sub(4,3)=1
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => g2p colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [print]  was not found.
    [2] => g3p colon [:] in user answer
    [3] => g3p expecting function: strMult, function found!
    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
    [0] => g3p constraint [print] was found.
    [1] => b2p missing colon [:] in user answer
    [2] => b2p expecting function: sub, it was not found!
    [3] => g10p python called sub(3,4), expected: -1, got user answer [-1]
    [4] => g10p python called sub(4,3), expected: 1, got user answer [1]
    [5] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 22
            [1] => 44
            [2] => 21
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => g2p colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [print]  was not found.
                    [2] => g3p colon [:] in user answer
                    [3] => g3p expecting function: strMult, function found!
                    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => g3p constraint [print] was found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => b2p expecting function: sub, it was not found!
                    [3] => g10p python called sub(3,4), expected: -1, got user answer [-1]
                    [4] => g10p python called sub(4,3), expected: 1, got user answer [1]
                    [5] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 22
            [1] => 44
            [2] => 21
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => g2p colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [print]  was not found.
                    [2] => g3p colon [:] in user answer
                    [3] => g3p expecting function: strMult, function found!
                    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => g3p constraint [print] was found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => b2p expecting function: sub, it was not found!
                    [3] => g10p python called sub(3,4), expected: -1, got user answer [-1]
                    [4] => g10p python called sub(4,3), expected: 1, got user answer [1]
                    [5] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [cons] => Array
                                (
                                    [0] => print
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)=-1
                                    [1] => sub(4,3)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b) print(a - b)
        )

    [grades] => Array
        (
            [0] => 22
            [1] => 44
            [2] => 21
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => g2p colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [print]  was not found.
                    [2] => g3p colon [:] in user answer
                    [3] => g3p expecting function: strMult, function found!
                    [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => g3p constraint [print] was found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => b2p expecting function: sub, it was not found!
                    [3] => g10p python called sub(3,4), expected: -1, got user answer [-1]
                    [4] => g10p python called sub(4,3), expected: 1, got user answer [1]
                    [5] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:53:37pm
executing testObject() with testId = 2
SELECT * FROM Test WHERE Id = '2' 
test being formed (temp1)...
Array
(
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:53:37pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 120 
[ + ] page accessed quesB 2019-04-26 10:53:37pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 120 
executing testObject() for test id : 2 
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

pushed test 2 into testArray
executing getFeedbacks() for testId 2 & qId 1
Array
(
    [0] => g12p colon [:] in user answer
    [1] => b12p expecting function: operation, it was not found!
    [2] => b87p user program failed to execute. 
)

executing getFeedbacks() for testId 2 & qId 2
Array
(
    [0] => b6p constraint [for]  was not found.
    [1] => b6p constraint [print]  was not found.
    [2] => g6p colon [:] in user answer
    [3] => g6p expecting function: strMult, function found!
    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 2 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 2
            [desc] => Vector Pioneer 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 120
                    [1] => 120
                )

        )

    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 21
            [1] => 108
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g12p colon [:] in user answer
                    [1] => b12p expecting function: operation, it was not found!
                    [2] => b87p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => b6p constraint [for]  was not found.
                    [1] => b6p constraint [print]  was not found.
                    [2] => g6p colon [:] in user answer
                    [3] => g6p expecting function: strMult, function found!
                    [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:53:37pm
executing testObject() with testId = 4
SELECT * FROM Test WHERE Id = '4' 
test being formed (temp1)...
Array
(
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:53:37pm
executing quesObject() with qId = 6
obtaining testcases for qId = 6
building the ques object (temp1)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 6
    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
    [topic] => String Subtract
    [cons] => Array
        (
        )

    [diff] => 5
    [tests] => Array
        (
            [0] => stringSub(-3, -9)=six
            [1] => stringSub(9, 9)=zero
            [2] => stringSub(50,9)=fourty-nine
            [3] => stringSub(5,2)=three
        )

)
question object for test built!

obtaining points from each question id: 6 
pts for this question : 10 
[ + ] page accessed quesB 2019-04-26 10:53:37pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 10 
executing testObject() for test id : 4 
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                    [tests] => Array
                        (
                            [0] => stringSub(-3, -9)=six
                            [1] => stringSub(9, 9)=zero
                            [2] => stringSub(50,9)=fourty-nine
                            [3] => stringSub(5,2)=three
                        )

                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)

pushed test 4 into testArray
executing getFeedbacks() for testId 4 & qId 6
Array
(
    [0] => g1p colon [:] in user answer
    [1] => g1p expecting function: stringSub, function found!
    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
    [6] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 4 & qId 3
Array
(
    [0] => b1p missing colon [:] in user answer
    [1] => g1p expecting function: addThree, function found!
    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 4 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 4
            [desc] => testing the new feedback system
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 6
                            [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                            [topic] => String Subtract
                            [cons] => Array
                                (
                                )

                            [diff] => 5
                            [tests] => Array
                                (
                                    [0] => stringSub(-3, -9)=six
                                    [1] => stringSub(9, 9)=zero
                                    [2] => stringSub(50,9)=fourty-nine
                                    [3] => stringSub(5,2)=three
                                )

                        )

                    [1] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 10
                    [1] => 10
                )

        )

    [answers] => Array
        (
            [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
            [1] => def addThree(a, b, c)
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 8
            [1] => 9
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g1p colon [:] in user answer
                    [1] => g1p expecting function: stringSub, function found!
                    [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                    [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                    [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                    [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                    [6] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b1p missing colon [:] in user answer
                    [1] => g1p expecting function: addThree, function found!
                    [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:53:37pm
executing testObject() with testId = 5
SELECT * FROM Test WHERE Id = '5' 
test being formed (temp1)...
Array
(
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:53:38pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-26 10:53:38pm
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [cons] => Array
        (
            [0] => for
            [1] => print
        )

    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:53:38pm
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [cons] => Array
        (
            [0] => while
        )

    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
executing testObject() for test id : 5 
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)

pushed test 5 into testArray
executing getFeedbacks() for testId 5 & qId 1
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: operation, function found!
    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 2
Array
(
    [0] => b2p constraint [for]  was not found.
    [1] => g2p constraint [print] was found.
    [2] => g2p colon [:] in user answer
    [3] => b2p expecting function: strMult, it was not found!
    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
    [8] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 5 & qId 4
Array
(
    [0] => b3p constraint [while]  was not found.
    [1] => b2p missing colon [:] in user answer
    [2] => g2p expecting function: factorial, function found!
    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 5 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 5
            [desc] => Sample Quiz
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => print
                                )

                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [cons] => Array
                                (
                                    [0] => while
                                )

                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                    [1] => 25
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

            [1] => def stringMult(s, n):
    print s*n
            [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
        )

    [grades] => Array
        (
            [0] => 29
            [1] => 21
            [2] => 20
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: operation, function found!
                    [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                    [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [8] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => b2p constraint [for]  was not found.
                    [1] => g2p constraint [print] was found.
                    [2] => g2p colon [:] in user answer
                    [3] => b2p expecting function: strMult, it was not found!
                    [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                    [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                    [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                    [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                    [8] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [while]  was not found.
                    [1] => b2p missing colon [:] in user answer
                    [2] => g2p expecting function: factorial, function found!
                    [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                    [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                    [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                    [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
            [2] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:53:38pm
executing testObject() with testId = 6
SELECT * FROM Test WHERE Id = '6' 
test being formed (temp1)...
Array
(
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:53:38pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:53:38pm
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [cons] => Array
        (
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)=error
            [6] => operation('hi',3,3)=error
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-26 10:53:38pm
executing quesObject() with qId = 7
obtaining testcases for qId = 7
building the ques object (temp1)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 7
    [desc] => Descriptionnnss
    [topic] => TipTop
    [cons] => Array
        (
            [0] => for
            [1] => while
        )

    [diff] => 2
    [tests] => Array
        (
            [0] => a()=d
            [1] => a()=d
        )

)
question object for test built!

obtaining points from each question id: 7 
pts for this question : 50 
executing testObject() for test id : 6 
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => a()=d
                            [1] => a()=d
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)

pushed test 6 into testArray
executing getFeedbacks() for testId 6 & qId 3
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: addThree, function found!
    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 1
Array
(
    [0] => g3p colon [:] in user answer
    [1] => g3p expecting function: operation, function found!
    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
    [9] => n0p user program succesfully executed. 
)

executing getFeedbacks() for testId 6 & qId 7
Array
(
    [0] => b3p constraint [for]  was not found.
    [1] => b3p constraint [while]  was not found.
    [2] => b3p missing colon [:] in user answer
    [3] => g3p expecting function: a, function found!
    [4] => b33p user program failed to execute. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

executing ansObject() for test id : 6 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 6
            [desc] => Test Exam 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                    [1] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [cons] => Array
                                (
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)=error
                                    [6] => operation('hi',3,3)=error
                                )

                        )

                    [2] => Array
                        (
                            [id] => 7
                            [desc] => Descriptionnnss
                            [topic] => TipTop
                            [cons] => Array
                                (
                                    [0] => for
                                    [1] => while
                                )

                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => a()=d
                                    [1] => a()=d
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 25
                    [2] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
            [1] => def operation(op, a, b):
    if op == '+':
        return a + b
            [2] => return 'a'
        )

    [grades] => Array
        (
            [0] => 25
            [1] => 10
            [2] => 8
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: addThree, function found!
                    [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

            [1] => Array
                (
                    [0] => g3p colon [:] in user answer
                    [1] => g3p expecting function: operation, function found!
                    [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                    [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                    [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                    [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                    [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                    [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                    [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                    [9] => n0p user program succesfully executed. 
                )

            [2] => Array
                (
                    [0] => b3p constraint [for]  was not found.
                    [1] => b3p constraint [while]  was not found.
                    [2] => b3p missing colon [:] in user answer
                    [3] => g3p expecting function: a, function found!
                    [4] => b33p user program failed to execute. 
                )

        )

    [remarks] => Array
        (
            [0] => New Remark for ya
            [1] => 
            [2] => 
        )

    [rel] => 1
)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-26 10:53:39pm
executing testObject() with testId = 7
SELECT * FROM Test WHERE Id = '7' 
test being formed (temp1)...
Array
(
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-26 10:53:39pm
executing quesObject() with qId = 3
obtaining testcases for qId = 3
building the ques object (temp1)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 3
    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
    [topic] => Adding Integers
    [cons] => Array
        (
        )

    [diff] => 1
    [tests] => Array
        (
            [0] => addThree(100, 200, 300)=600
            [1] => addThree(-7, 0, 19)=12
            [2] => addThree(-1,-1,-1)=-3
            [3] => addThree(1,2,3)=6
            [4] => addThree(4,5,6)=15
            [5] => addThree(0,0,0)=0
        )

)
question object for test built!

obtaining points from each question id: 3 
pts for this question : 50 
executing testObject() for test id : 7 
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)

pushed test 7 into testArray
executing getFeedbacks() for testId 7 & qId 3
Array
(
    [0] => g5p colon [:] in user answer
    [1] => g5p expecting function: addThree, function found!
    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
    [7] => n0p user program succesfully executed. 
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

executing ansObject() for test id : 7 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)

warning! ansObject is an array!
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
+ building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 7
            [desc] => My Test
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 3
                            [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                            [topic] => Adding Integers
                            [cons] => Array
                                (
                                )

                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => addThree(100, 200, 300)=600
                                    [1] => addThree(-7, 0, 19)=12
                                    [2] => addThree(-1,-1,-1)=-3
                                    [3] => addThree(1,2,3)=6
                                    [4] => addThree(4,5,6)=15
                                    [5] => addThree(0,0,0)=0
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 50
                )

        )

    [answers] => Array
        (
            [0] => def addThree(a, b, c):
    return a + b + c
        )

    [grades] => Array
        (
            [0] => 50
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p colon [:] in user answer
                    [1] => g5p expecting function: addThree, function found!
                    [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                    [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                    [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                    [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                    [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                    [7] => n0p user program succesfully executed. 
                )

        )

    [remarks] => Array
        (
            [0] => 
        )

    [rel] => 0
)
pushing the attempt object into array of attempts
the array of attempts is pushed into 'attemptArray':
Array
(
    [0] => Array
        (
            [test] => Array
                (
                    [id] => 1
                    [desc] => Quiz One
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 5
                                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                                    [topic] => Subtraction
                                    [cons] => Array
                                        (
                                            [0] => print
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => sub(3,4)=-1
                                            [1] => sub(4,3)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 50
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
                    [1] => def strMult(s, n):
    return s*n
                    [2] => def subtract(a,b) print(a - b)
                )

            [grades] => Array
                (
                    [0] => 22
                    [1] => 44
                    [2] => 21
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => g2p colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [print]  was not found.
                            [2] => g3p colon [:] in user answer
                            [3] => g3p expecting function: strMult, function found!
                            [4] => g10p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g10p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g10p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g10p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => g3p constraint [print] was found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => b2p expecting function: sub, it was not found!
                            [3] => g10p python called sub(3,4), expected: -1, got user answer [-1]
                            [4] => g10p python called sub(4,3), expected: 1, got user answer [1]
                            [5] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [1] => Array
        (
            [test] => Array
                (
                    [id] => 2
                    [desc] => Vector Pioneer 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 120
                            [1] => 120
                        )

                )

            [answers] => Array
                (
                    [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
                    [1] => def strMult(s, n):
    return s * n
                )

            [grades] => Array
                (
                    [0] => 21
                    [1] => 108
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g12p colon [:] in user answer
                            [1] => b12p expecting function: operation, it was not found!
                            [2] => b87p user program failed to execute. 
                        )

                    [1] => Array
                        (
                            [0] => b6p constraint [for]  was not found.
                            [1] => b6p constraint [print]  was not found.
                            [2] => g6p colon [:] in user answer
                            [3] => g6p expecting function: strMult, function found!
                            [4] => g24p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g24p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g24p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g24p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
                    [1] => 
                )

            [rel] => 0
        )

    [2] => Array
        (
            [test] => Array
                (
                    [id] => 4
                    [desc] => testing the new feedback system
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 6
                                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                                    [topic] => String Subtract
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 5
                                    [tests] => Array
                                        (
                                            [0] => stringSub(-3, -9)=six
                                            [1] => stringSub(9, 9)=zero
                                            [2] => stringSub(50,9)=fourty-nine
                                            [3] => stringSub(5,2)=three
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 10
                            [1] => 10
                        )

                )

            [answers] => Array
                (
                    [0] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
                    [1] => def addThree(a, b, c)
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 8
                    [1] => 9
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g1p colon [:] in user answer
                            [1] => g1p expecting function: stringSub, function found!
                            [2] => g2p python called stringSub(-3, -9), expected: six, got user answer [six]
                            [3] => g2p python called stringSub(9, 9), expected: zero, got user answer [zero]
                            [4] => b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]
                            [5] => g2p python called stringSub(5,2), expected: three, got user answer [three]
                            [6] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b1p missing colon [:] in user answer
                            [1] => g1p expecting function: addThree, function found!
                            [2] => g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g2p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g2p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                )

            [rel] => 0
        )

    [3] => Array
        (
            [test] => Array
                (
                    [id] => 5
                    [desc] => Sample Quiz
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 2
                                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                                    [topic] => Printing string
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => print
                                        )

                                    [diff] => 3
                                    [tests] => Array
                                        (
                                            [0] => strMult("hello",1)=hello
                                            [1] => strMult("up", 4)=upupupup
                                            [2] => strMult("hey", 3)=heyheyhey
                                            [3] => strMult("aba", 2)=abaaba
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 4
                                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                                    [topic] => Math Factorial
                                    [cons] => Array
                                        (
                                            [0] => while
                                        )

                                    [diff] => 4
                                    [tests] => Array
                                        (
                                            [0] => factorial(2)=2
                                            [1] => factorial(5)=120
                                            [2] => factorial(3)=6
                                            [3] => factorial(1)=1
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                            [1] => 25
                            [2] => 25
                        )

                )

            [answers] => Array
                (
                    [0] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

                    [1] => def stringMult(s, n):
    print s*n
                    [2] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
                )

            [grades] => Array
                (
                    [0] => 29
                    [1] => 21
                    [2] => 20
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: operation, function found!
                            [2] => g6p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b6p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [4] => g6p python called operation('*',3,3), expected: 9, got user answer [9]
                            [5] => b6p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [6] => b5p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [7] => b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [8] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => b2p constraint [for]  was not found.
                            [1] => g2p constraint [print] was found.
                            [2] => g2p colon [:] in user answer
                            [3] => b2p expecting function: strMult, it was not found!
                            [4] => g5p python called strMult("hello",1), expected: hello, got user answer [hello]
                            [5] => g5p python called strMult("up", 4), expected: upupupup, got user answer [upupupup]
                            [6] => g5p python called strMult("hey", 3), expected: heyheyhey, got user answer [heyheyhey]
                            [7] => g5p python called strMult("aba", 2), expected: abaaba, got user answer [abaaba]
                            [8] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [while]  was not found.
                            [1] => b2p missing colon [:] in user answer
                            [2] => g2p expecting function: factorial, function found!
                            [3] => g5p python called factorial(2), expected: 2, got user answer [2]
                            [4] => g5p python called factorial(5), expected: 120, got user answer [120]
                            [5] => g5p python called factorial(3), expected: 6, got user answer [6]
                            [6] => g5p python called factorial(1), expected: 1, got user answer [1]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                    [1] => 
                    [2] => 
                )

            [rel] => 0
        )

    [4] => Array
        (
            [test] => Array
                (
                    [id] => 6
                    [desc] => Test Exam 2
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                            [1] => Array
                                (
                                    [id] => 1
                                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                                    [topic] => Operators
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => operation('+',3,3)=6
                                            [1] => operation('-',3,3)=0
                                            [2] => operation('/',3,3)=1
                                            [3] => operation('*',3,3)=9
                                            [4] => operation('%',3,3)=0
                                            [5] => operation('?',3,3)=error
                                            [6] => operation('hi',3,3)=error
                                        )

                                )

                            [2] => Array
                                (
                                    [id] => 7
                                    [desc] => Descriptionnnss
                                    [topic] => TipTop
                                    [cons] => Array
                                        (
                                            [0] => for
                                            [1] => while
                                        )

                                    [diff] => 2
                                    [tests] => Array
                                        (
                                            [0] => a()=d
                                            [1] => a()=d
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 25
                            [1] => 25
                            [2] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                    [1] => def operation(op, a, b):
    if op == '+':
        return a + b
                    [2] => return 'a'
                )

            [grades] => Array
                (
                    [0] => 25
                    [1] => 10
                    [2] => 8
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: addThree, function found!
                            [2] => g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g4p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g4p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                    [1] => Array
                        (
                            [0] => g3p colon [:] in user answer
                            [1] => g3p expecting function: operation, function found!
                            [2] => g3p python called operation('+',3,3), expected: 6, got user answer [6]
                            [3] => b3p python called operation('-',3,3),  expected answer: , got user answer [None]
                            [4] => b3p python called operation('/',3,3),  expected answer: 1, got user answer [None]
                            [5] => b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]
                            [6] => b2p python called operation('%',3,3),  expected answer: , got user answer [None]
                            [7] => b2p python called operation('?',3,3),  expected answer: error, got user answer [None]
                            [8] => b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]
                            [9] => n0p user program succesfully executed. 
                        )

                    [2] => Array
                        (
                            [0] => b3p constraint [for]  was not found.
                            [1] => b3p constraint [while]  was not found.
                            [2] => b3p missing colon [:] in user answer
                            [3] => g3p expecting function: a, function found!
                            [4] => b33p user program failed to execute. 
                        )

                )

            [remarks] => Array
                (
                    [0] => New Remark for ya
                    [1] => 
                    [2] => 
                )

            [rel] => 1
        )

    [5] => Array
        (
            [test] => Array
                (
                    [id] => 7
                    [desc] => My Test
                    [rel] => 1
                    [sub] => 1
                    [ques] => Array
                        (
                            [0] => Array
                                (
                                    [id] => 3
                                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                                    [topic] => Adding Integers
                                    [cons] => Array
                                        (
                                        )

                                    [diff] => 1
                                    [tests] => Array
                                        (
                                            [0] => addThree(100, 200, 300)=600
                                            [1] => addThree(-7, 0, 19)=12
                                            [2] => addThree(-1,-1,-1)=-3
                                            [3] => addThree(1,2,3)=6
                                            [4] => addThree(4,5,6)=15
                                            [5] => addThree(0,0,0)=0
                                        )

                                )

                        )

                    [pts] => Array
                        (
                            [0] => 50
                        )

                )

            [answers] => Array
                (
                    [0] => def addThree(a, b, c):
    return a + b + c
                )

            [grades] => Array
                (
                    [0] => 50
                )

            [feedback] => Array
                (
                    [0] => Array
                        (
                            [0] => g5p colon [:] in user answer
                            [1] => g5p expecting function: addThree, function found!
                            [2] => g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]
                            [3] => g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]
                            [4] => g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]
                            [5] => g7p python called addThree(1,2,3), expected: 6, got user answer [6]
                            [6] => g7p python called addThree(4,5,6), expected: 15, got user answer [15]
                            [7] => n0p user program succesfully executed. 
                        )

                )

            [remarks] => Array
                (
                    [0] => 
                )

            [rel] => 0
        )

)

+ encoded the attemptArray into JSON:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["22","44","21"],"feedback":[["b3p constraint [while]  was not found.","g2p colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [print]  was not found.","g3p colon [:] in user answer","g3p expecting function: strMult, function found!","g10p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g10p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g10p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g10p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["g3p constraint [print] was found.","b2p missing colon [:] in user answer","b2p expecting function: sub, it was not found!","g10p python called sub(3,4), expected: -1, got user answer [-1]","g10p python called sub(4,3), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}executing getAttempt()...output:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1","tests":["sub(3,4)=-1","sub(4,3)=1"]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b) print(a - b)"],"grades":["22","44","21"],"feedback":[["b3p constraint [while]  was not found.","g2p colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [print]  was not found.","g3p colon [:] in user answer","g3p expecting function: strMult, function found!","g10p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g10p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g10p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g10p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["g3p constraint [print] was found.","b2p missing colon [:] in user answer","b2p expecting function: sub, it was not found!","g10p python called sub(3,4), expected: -1, got user answer [-1]","g10p python called sub(4,3), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["21","108"],"feedback":[["g12p colon [:] in user answer","b12p expecting function: operation, it was not found!","b87p user program failed to execute. "],["b6p constraint [for]  was not found.","b6p constraint [print]  was not found.","g6p colon [:] in user answer","g6p expecting function: strMult, function found!","g24p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g24p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g24p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g24p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "]],"remarks":["here, the operator ? crashed the program, so it failed the answer and lost 87 points. ",""],"rel":"0"},{"test":{"id":"4","desc":"testing the new feedback system","rel":"1","sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5","tests":["stringSub(-3, -9)=six","stringSub(9, 9)=zero","stringSub(50,9)=fourty-nine","stringSub(5,2)=three"]},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["10","10"]},"answers":["def stringSub(a, b): \n    diff = a - b\n    return switch(diff)\n    \ndef switch(diff):\n    switcher = {\n        0: \"zero\",\n        1: \"one\",\n        2: \"two\",\n        3: \"three\",\n        4: \"four\",\n        5: \"five\",\n        6: \"six\",\n        7: \"seven\",\n        8: \"eight\",\n        9: \"nine\",\n    }\n    return switcher.get(diff, \"nothing\")\n    ","def addThree(a, b, c)\r\n    return a + b + c"],"grades":["8","9"],"feedback":[["g1p colon [:] in user answer","g1p expecting function: stringSub, function found!","g2p python called stringSub(-3, -9), expected: six, got user answer [six]","g2p python called stringSub(9, 9), expected: zero, got user answer [zero]","b2p python called stringSub(50,9),  expected answer: fourty-nine, got user answer [nothing]","g2p python called stringSub(5,2), expected: three, got user answer [three]","n0p user program succesfully executed. "],["b1p missing colon [:] in user answer","g1p expecting function: addThree, function found!","g2p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g2p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g2p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g2p python called addThree(1,2,3), expected: 6, got user answer [6]","g2p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":["",""],"rel":"0"},{"test":{"id":"5","desc":"Sample Quiz","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]}],"pts":["50","25","25"]},"answers":["def operation(op, a, b):\n    if op == '+':\n        return a+b\n    elif op == '-':\n        return a-b\n    elif op == '*':\n        return a*b\n","def stringMult(s, n):\n    print s*n","def factorial(n)\n    acc = 1\n    for i in range(1,n+1):\n        acc *= i\n    return acc"],"grades":["29","21","20"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: operation, function found!","g6p python called operation('+',3,3), expected: 6, got user answer [6]","b6p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","g6p python called operation('*',3,3), expected: 9, got user answer [9]","b6p python called operation('%',3,3),  expected answer: , got user answer [None]","b5p python called operation('?',3,3),  expected answer: error, got user answer [None]","b4p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b2p constraint [for]  was not found.","g2p constraint [print] was found.","g2p colon [:] in user answer","b2p expecting function: strMult, it was not found!","g5p python called strMult(\"hello\",1), expected: hello, got user answer [hello]","g5p python called strMult(\"up\", 4), expected: upupupup, got user answer [upupupup]","g5p python called strMult(\"hey\", 3), expected: heyheyhey, got user answer [heyheyhey]","g5p python called strMult(\"aba\", 2), expected: abaaba, got user answer [abaaba]","n0p user program succesfully executed. "],["b3p constraint [while]  was not found.","b2p missing colon [:] in user answer","g2p expecting function: factorial, function found!","g5p python called factorial(2), expected: 2, got user answer [2]","g5p python called factorial(5), expected: 120, got user answer [120]","g5p python called factorial(3), expected: 6, got user answer [6]","g5p python called factorial(1), expected: 1, got user answer [1]","n0p user program succesfully executed. "]],"remarks":["","",""],"rel":"0"},{"test":{"id":"6","desc":"Test Exam 2","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=error","operation('hi',3,3)=error"]},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2","tests":["a()=d","a()=d"]}],"pts":["25","25","50"]},"answers":["def addThree(a, b, c):\n    return a + b + c","def operation(op, a, b):\n    if op == '+':\n        return a + b","return 'a'"],"grades":["25","10","8"],"feedback":[["g3p colon [:] in user answer","g3p expecting function: addThree, function found!","g4p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g4p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g4p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g4p python called addThree(1,2,3), expected: 6, got user answer [6]","g4p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "],["g3p colon [:] in user answer","g3p expecting function: operation, function found!","g3p python called operation('+',3,3), expected: 6, got user answer [6]","b3p python called operation('-',3,3),  expected answer: , got user answer [None]","b3p python called operation('\/',3,3),  expected answer: 1, got user answer [None]","b3p python called operation('*',3,3),  expected answer: 9, got user answer [None]","b2p python called operation('%',3,3),  expected answer: , got user answer [None]","b2p python called operation('?',3,3),  expected answer: error, got user answer [None]","b2p python called operation('hi',3,3),  expected answer: error, got user answer [None]","n0p user program succesfully executed. "],["b3p constraint [for]  was not found.","b3p constraint [while]  was not found.","b3p missing colon [:] in user answer","g3p expecting function: a, function found!","b33p user program failed to execute. "]],"remarks":["New Remark for ya","",""],"rel":"1"},{"test":{"id":"7","desc":"My Test","rel":"1","sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1","tests":["addThree(100, 200, 300)=600","addThree(-7, 0, 19)=12","addThree(-1,-1,-1)=-3","addThree(1,2,3)=6","addThree(4,5,6)=15","addThree(0,0,0)=0"]}],"pts":["50"]},"answers":["def addThree(a, b, c):\n    return a + b + c"],"grades":["50"],"feedback":[["g5p colon [:] in user answer","g5p expecting function: addThree, function found!","g7p python called addThree(100, 200, 300), expected: 600, got user answer [600]","g7p python called addThree(-7, 0, 19), expected: 12, got user answer [12]","g7p python called addThree(-1,-1,-1), expected: -3, got user answer [-3]","g7p python called addThree(1,2,3), expected: 6, got user answer [6]","g7p python called addThree(4,5,6), expected: 15, got user answer [15]","n0p user program succesfully executed. "]],"remarks":[""],"rel":"0"}]}+  page accessed by getCons 2019-04-26 10:53:45pm
+ received data : 
Array
(
    [type] => getT
    [rels] => Array
        (
            [0] => 1
        )

)

+ getCons() in backend  was succesful. data: 
[]
[ + ]  page accessed getT 2019-04-26 10:53:45pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 1580856
data received...
Array
(
    [type] => getT
    [rels] => Array
        (
            [0] => 1
        )

)
select * from questionstudentrelation where testid = 1
Array
(
    [Id] => 149
    [grade] => 0
    [rel] => 0
    [userAnswer] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
    [feedback] => 
    [points] => 22
    [maxpoints] => 25
    [testId] => 1
    [questionId] => 4
    [testName] => Quiz One
    [remarks] => 
)

Array
(
    [Id] => 150
    [grade] => 0
    [rel] => 0
    [userAnswer] => def strMult(s, n):
    return s*n
    [feedback] => 
    [points] => 44
    [maxpoints] => 50
    [testId] => 1
    [questionId] => 2
    [testName] => Quiz One
    [remarks] => 
)

Array
(
    [Id] => 151
    [grade] => 0
    [rel] => 0
    [userAnswer] => def subtract(a,b) print(a - b)
    [feedback] => 
    [points] => 21
    [maxpoints] => 25
    [testId] => 1
    [questionId] => 5
    [testName] => Quiz One
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 25
    [1] => 50
    [2] => 25
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

formed the test object...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)
select * from questionstudentrelation where testid = 2
Array
(
    [Id] => 155
    [grade] => 0
    [rel] => 0
    [userAnswer] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
    [feedback] => 
    [points] => 21
    [maxpoints] => 120
    [testId] => 2
    [questionId] => 1
    [testName] => Vector Pioneer 2
    [remarks] => here, the operator ? crashed the program, so it failed the answer and lost 87 points. 
)

Array
(
    [Id] => 156
    [grade] => 0
    [rel] => 0
    [userAnswer] => def strMult(s, n):
    return s * n
    [feedback] => 
    [points] => 108
    [maxpoints] => 120
    [testId] => 2
    [questionId] => 2
    [testName] => Vector Pioneer 2
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 120
    [1] => 120
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

formed the test object...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)
select * from questionstudentrelation where testid = 4
Array
(
    [Id] => 159
    [grade] => 0
    [rel] => 0
    [userAnswer] => def stringSub(a, b): 
    diff = a - b
    return switch(diff)
    
def switch(diff):
    switcher = {
        0: "zero",
        1: "one",
        2: "two",
        3: "three",
        4: "four",
        5: "five",
        6: "six",
        7: "seven",
        8: "eight",
        9: "nine",
    }
    return switcher.get(diff, "nothing")
    
    [feedback] => 
    [points] => 8
    [maxpoints] => 10
    [testId] => 4
    [questionId] => 6
    [testName] => testing the new feedback system
    [remarks] => 
)

Array
(
    [Id] => 160
    [grade] => 0
    [rel] => 0
    [userAnswer] => def addThree(a, b, c)
    return a + b + c
    [feedback] => 
    [points] => 9
    [maxpoints] => 10
    [testId] => 4
    [questionId] => 3
    [testName] => testing the new feedback system
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 10
    [1] => 10
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)

formed the test object...
Array
(
    [id] => 4
    [desc] => testing the new feedback system
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                )

            [1] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 10
            [1] => 10
        )

)
select * from questionstudentrelation where testid = 5
Array
(
    [Id] => 161
    [grade] => 31
    [rel] => 0
    [userAnswer] => def operation(op, a, b):
    if op == '+':
        return a+b
    elif op == '-':
        return a-b
    elif op == '*':
        return a*b

    [feedback] => 
    [points] => 29
    [maxpoints] => 50
    [testId] => 5
    [questionId] => 1
    [testName] => Sample Quiz
    [remarks] => 
)

Array
(
    [Id] => 162
    [grade] => 0
    [rel] => 0
    [userAnswer] => def stringMult(s, n):
    print s*n
    [feedback] => 
    [points] => 21
    [maxpoints] => 25
    [testId] => 5
    [questionId] => 2
    [testName] => Sample Quiz
    [remarks] => 
)

Array
(
    [Id] => 163
    [grade] => 0
    [rel] => 0
    [userAnswer] => def factorial(n)
    acc = 1
    for i in range(1,n+1):
        acc *= i
    return acc
    [feedback] => 
    [points] => 20
    [maxpoints] => 25
    [testId] => 5
    [questionId] => 4
    [testName] => Sample Quiz
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 50
    [1] => 25
    [2] => 25
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)

formed the test object...
Array
(
    [id] => 5
    [desc] => Sample Quiz
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                )

        )

    [pts] => Array
        (
            [0] => 50
            [1] => 25
            [2] => 25
        )

)
select * from questionstudentrelation where testid = 6
Array
(
    [Id] => 164
    [grade] => 0
    [rel] => 1
    [userAnswer] => def addThree(a, b, c):
    return a + b + c
    [feedback] => 
    [points] => 25
    [maxpoints] => 25
    [testId] => 6
    [questionId] => 3
    [testName] => Test Exam 2
    [remarks] => New Remark for ya
)

Array
(
    [Id] => 165
    [grade] => 0
    [rel] => 1
    [userAnswer] => def operation(op, a, b):
    if op == '+':
        return a + b
    [feedback] => 
    [points] => 10
    [maxpoints] => 25
    [testId] => 6
    [questionId] => 1
    [testName] => Test Exam 2
    [remarks] => 
)

Array
(
    [Id] => 166
    [grade] => 0
    [rel] => 1
    [userAnswer] => return 'a'
    [feedback] => 
    [points] => 8
    [maxpoints] => 50
    [testId] => 6
    [questionId] => 7
    [testName] => Test Exam 2
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 25
    [1] => 25
    [2] => 50
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)

formed the test object...
Array
(
    [id] => 6
    [desc] => Test Exam 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

            [1] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                )

            [2] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 25
            [2] => 50
        )

)
select * from questionstudentrelation where testid = 7
Array
(
    [Id] => 167
    [grade] => 170
    [rel] => 0
    [userAnswer] => def addThree(a, b, c):
    return a + b + c
    [feedback] => 
    [points] => 50
    [maxpoints] => 50
    [testId] => 7
    [questionId] => 3
    [testName] => My Test
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 50
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)

formed the test object...
Array
(
    [id] => 7
    [desc] => My Test
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 50
        )

)
running getExam()...output:
{"type":"getT","error":"0","tests":[{"id":"1","desc":"Quiz One","rel":1,"sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4"},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3"},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","cons":["print"],"diff":"1"}],"pts":["25","50","25"]},{"id":"2","desc":"Vector Pioneer 2","rel":1,"sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2"},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3"}],"pts":["120","120"]},{"id":"4","desc":"testing the new feedback system","rel":1,"sub":"1","ques":[{"id":"6","desc":"Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return \"three\", and stringSub(50,9) would return \"fourty-nine\". Multi-word numbers should be hyphenated, and all characters should be lowercase. ","topic":"String Subtract","cons":[],"diff":"5"},{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1"}],"pts":["10","10"]},{"id":"5","desc":"Sample Quiz","rel":1,"sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2"},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","cons":["for","print"],"diff":"3"},{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","cons":["while"],"diff":"4"}],"pts":["50","25","25"]},{"id":"6","desc":"Test Exam 2","rel":1,"sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1"},{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","cons":[],"diff":"2"},{"id":"7","desc":"Descriptionnnss","topic":"TipTop","cons":["for","while"],"diff":"2"}],"pts":["25","25","50"]},{"id":"7","desc":"My Test","rel":1,"sub":"1","ques":[{"id":"3","desc":"Write a function called addThree() that takes three integer parameters and returns their sum.","topic":"Adding Integers","cons":[],"diff":"1"}],"pts":["50"]}]}[ + ] page accessed getQ 2019-04-26 10:53:55pm
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 1622310
+ calling getCons() ... 
+ calling getCons() ... 
+ pushing into cons array : 
print
+ calling getCons() ... 
+ calling getCons() ... 
+ pushing into cons array : 
for
+ pushing into cons array : 
while
+ calling getCons() ... 
+ pushing into cons array : 
for
+ pushing into cons array : 
print
+ calling getCons() ... 
+ pushing into cons array : 
while
+ calling getCons() ... 
+ getQuest() produced the object:
Array
(
    [type] => getQ
    [error] => 0
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 3
                    [desc] => Write a function called addThree() that takes three integer parameters and returns their sum.
                    [topic] => Adding Integers
                    [cons] => Array
                        (
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => addThree(100, 200, 300)=600
                            [1] => addThree(-7, 0, 19)=12
                            [2] => addThree(-1,-1,-1)=-3
                            [3] => addThree(1,2,3)=6
                            [4] => addThree(4,5,6)=15
                            [5] => addThree(0,0,0)=0
                        )

                )

            [1] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [cons] => Array
                        (
                            [0] => print
                        )

                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)=-1
                            [1] => sub(4,3)=1
                        )

                )

            [2] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [cons] => Array
                        (
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)=error
                            [6] => operation('hi',3,3)=error
                        )

                )

            [3] => Array
                (
                    [id] => 7
                    [desc] => Descriptionnnss
                    [topic] => TipTop
                    [cons] => Array
                        (
                            [0] => for
                            [1] => while
                        )

                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => a()=d
                            [1] => a()=d
                        )

                )

            [4] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [cons] => Array
                        (
                            [0] => for
                            [1] => print
                        )

                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [5] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [cons] => Array
                        (
                            [0] => while
                        )

                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [6] => Array
                (
                    [id] => 6
                    [desc] => Write a function called stringSub() which takes two parameters and returns their difference written out as a string. For instance stringSub(5,2) would return "three", and stringSub(50,9) would return "fourty-nine". Multi-word numbers should be hyphenated, and all characters should be lowercase. 
                    [topic] => String Subtract
                    [cons] => Array
                        (
                        )

                    [diff] => 5
                    [tests] => Array
                        (
                            [0] => stringSub(-3, -9)=six
                            [1] => stringSub(9, 9)=zero
                            [2] => stringSub(50,9)=fourty-nine
                            [3] => stringSub(5,2)=three
                        )

                )

        )

)

