
+ the log reached 10 mb; it has been cleared 
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 120 
executing testObject() for test id : 2 
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)="error"
                            [6] => operation('hi',3,3)="error"
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

pushed test 2 into testArray
executing getFeedbacks() for testId 2 & qId 1
Array
(
    [0] => g5p missing colon [:] in user answer
    [1] => b6p expecting function name [operation] in answer was not found!
    [2] => b91.2p user program failed to execute. 
)

executing getFeedbacks() for testId 2 & qId 2
Array
(
    [0] => g5p missing colon [:] in user answer
    [1] => n0p expecting function [strMult] in answer found!
    [2] => g20p called [strMult("hello",1)], expected: [hello], got user answer [hello]
    [3] => g20p called [strMult("up", 4)], expected: [upupupup], got user answer [upupupup]
    [4] => g20p called [strMult("hey", 3)], expected: [heyheyhey], got user answer [heyheyhey]
    [5] => g20p called [strMult("aba", 2)], expected: [abaaba], got user answer [abaaba]
    [6] => n0p user program succesfully executed. 
    [7] => b24p constraint [for]  was not found.
    [8] => b19.2p constraint [print]  was not found.
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 23
            [1] => 77
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => b6p expecting function name [operation] in answer was not found!
                    [2] => b91.2p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => n0p expecting function [strMult] in answer found!
                    [2] => g20p called [strMult("hello",1)], expected: [hello], got user answer [hello]
                    [3] => g20p called [strMult("up", 4)], expected: [upupupup], got user answer [upupupup]
                    [4] => g20p called [strMult("hey", 3)], expected: [heyheyhey], got user answer [heyheyhey]
                    [5] => g20p called [strMult("aba", 2)], expected: [abaaba], got user answer [abaaba]
                    [6] => n0p user program succesfully executed. 
                    [7] => b24p constraint [for]  was not found.
                    [8] => b19.2p constraint [print]  was not found.
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

)

executing ansObject() for test id : 2 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 23
            [1] => 77
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => b6p expecting function name [operation] in answer was not found!
                    [2] => b91.2p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => n0p expecting function [strMult] in answer found!
                    [2] => g20p called [strMult("hello",1)], expected: [hello], got user answer [hello]
                    [3] => g20p called [strMult("up", 4)], expected: [upupupup], got user answer [upupupup]
                    [4] => g20p called [strMult("hey", 3)], expected: [heyheyhey], got user answer [heyheyhey]
                    [5] => g20p called [strMult("aba", 2)], expected: [abaaba], got user answer [abaaba]
                    [6] => n0p user program succesfully executed. 
                    [7] => b24p constraint [for]  was not found.
                    [8] => b19.2p constraint [print]  was not found.
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

)

warning! ansObject is an array!
building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 2
            [desc] => Vector Pioneer 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)="error"
                                    [6] => operation('hi',3,3)="error"
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 120
                    [1] => 120
                )

        )

    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 23
            [1] => 77
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => b6p expecting function name [operation] in answer was not found!
                    [2] => b91.2p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => n0p expecting function [strMult] in answer found!
                    [2] => g20p called [strMult("hello",1)], expected: [hello], got user answer [hello]
                    [3] => g20p called [strMult("up", 4)], expected: [upupupup], got user answer [upupupup]
                    [4] => g20p called [strMult("hey", 3)], expected: [heyheyhey], got user answer [heyheyhey]
                    [5] => g20p called [strMult("aba", 2)], expected: [abaaba], got user answer [abaaba]
                    [6] => n0p user program succesfully executed. 
                    [7] => b24p constraint [for]  was not found.
                    [8] => b19.2p constraint [print]  was not found.
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

)
pushing the attempt object into array of attempts
executing getAttempt()...output:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","diff":"1","tests":["sub(3,4)=\"-1\"","sub(4,3)=\"1\""]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b)\n    print a - b"],"grades":["20","32","5"],"feedback":[["g5p missing colon [:] in user answer","n0p expecting function [factorial] in answer found!","g20p called [factorial(2)], expected: [2], got user answer [2]","g20p called [factorial(5)], expected: [120], got user answer [120]","g20p called [factorial(3)], expected: [6], got user answer [6]","g20p called [factorial(1)], expected: [1], got user answer [1]","n0p user program succesfully executed. ","b5p constraint [while]  was not found."],["g5p missing colon [:] in user answer","n0p expecting function [strMult] in answer found!","g20p called [strMult(\"hello\",1)], expected: [hello], got user answer [hello]","g20p called [strMult(\"up\", 4)], expected: [upupupup], got user answer [upupupup]","g20p called [strMult(\"hey\", 3)], expected: [heyheyhey], got user answer [heyheyhey]","g20p called [strMult(\"aba\", 2)], expected: [abaaba], got user answer [abaaba]","n0p user program succesfully executed. ","b10p constraint [for]  was not found.","b8p constraint [print]  was not found."],["b1.25p missing colon [:] in user answer","n0p expecting function [sub] in answer found!","b19.2p user program failed to execute. ","g20p constraint [print] was found."]],"remarks":["1 should lose points for not using a while loop. \n\n2 should lose points for not using a for loop and for not printing the answer. \n\n3 should lose points for wrong name and for missing colon.","1 should lose points for not using a while loop. \n\n2 should lose points for not using a for loop and for not printing the answer. \n\n3 should lose points for wrong name and for missing colon.","1 should lose points for not using a while loop. \n\n2 should lose points for not using a for loop and for not printing the answer. \n\n3 should lose points for wrong name and for missing colon."]},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=\"error\"","operation('hi',3,3)=\"error\""]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["23","77"],"feedback":[["g5p missing colon [:] in user answer","b6p expecting function name [operation] in answer was not found!","b91.2p user program failed to execute. "],["g5p missing colon [:] in user answer","n0p expecting function [strMult] in answer found!","g20p called [strMult(\"hello\",1)], expected: [hello], got user answer [hello]","g20p called [strMult(\"up\", 4)], expected: [upupupup], got user answer [upupupup]","g20p called [strMult(\"hey\", 3)], expected: [heyheyhey], got user answer [heyheyhey]","g20p called [strMult(\"aba\", 2)], expected: [abaaba], got user answer [abaaba]","n0p user program succesfully executed. ","b24p constraint [for]  was not found.","b19.2p constraint [print]  was not found."]],"remarks":["",""]}]}[ + ]  page accessed getT 2019-04-13 04:07:47am
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 16613
data received...
Array
(
    [type] => getT
    [rels] => Array
        (
            [0] => 1
        )

)
select * from questionstudentrelation where testid = 1
Array
(
    [Id] => 149
    [attemptId] => 0
    [userAnswer] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
    [feedback] => 
    [points] => 20
    [maxpoints] => 25
    [testId] => 1
    [questionId] => 4
    [testName] => Quiz One
    [remarks] => 1 should lose points for not using a while loop. 

2 should lose points for not using a for loop and for not printing the answer. 

3 should lose points for wrong name and for missing colon.
)

Array
(
    [Id] => 150
    [attemptId] => 0
    [userAnswer] => def strMult(s, n):
    return s*n
    [feedback] => 
    [points] => 32
    [maxpoints] => 50
    [testId] => 1
    [questionId] => 2
    [testName] => Quiz One
    [remarks] => 1 should lose points for not using a while loop. 

2 should lose points for not using a for loop and for not printing the answer. 

3 should lose points for wrong name and for missing colon.
)

Array
(
    [Id] => 151
    [attemptId] => 0
    [userAnswer] => def subtract(a,b)
    print a - b
    [feedback] => 
    [points] => 5
    [maxpoints] => 25
    [testId] => 1
    [questionId] => 5
    [testName] => Quiz One
    [remarks] => 1 should lose points for not using a while loop. 

2 should lose points for not using a for loop and for not printing the answer. 

3 should lose points for wrong name and for missing colon.
)

check the contents of temp..
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 25
    [1] => 50
    [2] => 25
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [diff] => 1
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [diff] => 1
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

formed the test object...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [diff] => 4
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [diff] => 3
                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [diff] => 1
                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)
select * from questionstudentrelation where testid = 2
Array
(
    [Id] => 155
    [attemptId] => 0
    [userAnswer] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
    [feedback] => 
    [points] => 23
    [maxpoints] => 120
    [testId] => 2
    [questionId] => 1
    [testName] => Vector Pioneer 2
    [remarks] => 
)

Array
(
    [Id] => 156
    [attemptId] => 0
    [userAnswer] => def strMult(s, n):
    return s * n
    [feedback] => 
    [points] => 77
    [maxpoints] => 120
    [testId] => 2
    [questionId] => 2
    [testName] => Vector Pioneer 2
    [remarks] => 
)

check the contents of temp..
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

check the contents of arrayofPts...
Array
(
    [0] => 120
    [1] => 120
)

array of questions ... 
Array
(
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [diff] => 3
                )

        )

)

contents of temp with questions...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [diff] => 3
                )

        )

)

contents of temp with arrayofPts...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [diff] => 3
                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

formed the test object...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [diff] => 2
                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [diff] => 3
                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)
running getExam()...output:
{"type":"getT","error":"0","tests":[{"id":"1","desc":"Quiz One","rel":1,"sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","diff":"4"},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","diff":"3"},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","diff":"1"}],"pts":["25","50","25"]},{"id":"2","desc":"Vector Pioneer 2","rel":1,"sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","diff":"2"},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","diff":"3"}],"pts":["120","120"]}]}[ + ] page accessed getA 2019-04-13 07:55:57am
+ target file size of : /afs/cad/u/r/d/rd248/public_html/download/beta/back/log.txt = 29494
data received...
Array
(
    [type] => getA
    [ids] => Array
        (
        )

)

decoder returned an empty array of ids! go get em!
getallIds() is called!
[ + ] page accessed testB 2019-04-13 07:55:57am
executing testObject() with testId = 1
SELECT * FROM Test WHERE Id = '1' 
test being formed (temp1)...
Array
(
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-13 07:55:57am
executing quesObject() with qId = 4
obtaining testcases for qId = 4
building the ques object (temp1)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [diff] => 4
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 4
    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
    [topic] => Math Factorial
    [diff] => 4
    [tests] => Array
        (
            [0] => factorial(2)=2
            [1] => factorial(5)=120
            [2] => factorial(3)=6
            [3] => factorial(1)=1
        )

)
question object for test built!

obtaining points from each question id: 4 
pts for this question : 25 
[ + ] page accessed quesB 2019-04-13 07:55:57am
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 50 
[ + ] page accessed quesB 2019-04-13 07:55:57am
executing quesObject() with qId = 5
obtaining testcases for qId = 5
building the ques object (temp1)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [diff] => 1
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 5
    [desc] => Write a function called sub() that takes two integers and prints their difference.
    [topic] => Subtraction
    [diff] => 1
    [tests] => Array
        (
            [0] => sub(3,4)="-1"
            [1] => sub(4,3)="1"
        )

)
question object for test built!

obtaining points from each question id: 5 
pts for this question : 25 
executing testObject() for test id : 1 
Array
(
    [id] => 1
    [desc] => Quiz One
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 4
                    [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                    [topic] => Math Factorial
                    [diff] => 4
                    [tests] => Array
                        (
                            [0] => factorial(2)=2
                            [1] => factorial(5)=120
                            [2] => factorial(3)=6
                            [3] => factorial(1)=1
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

            [2] => Array
                (
                    [id] => 5
                    [desc] => Write a function called sub() that takes two integers and prints their difference.
                    [topic] => Subtraction
                    [diff] => 1
                    [tests] => Array
                        (
                            [0] => sub(3,4)="-1"
                            [1] => sub(4,3)="1"
                        )

                )

        )

    [pts] => Array
        (
            [0] => 25
            [1] => 50
            [2] => 25
        )

)

pushed test 1 into testArray
executing getFeedbacks() for testId 1 & qId 4
Array
(
    [0] => g5p missing colon [:] in user answer
    [1] => n0p expecting function [factorial] in answer found!
    [2] => g20p called [factorial(2)], expected: [2], got user answer [2]
    [3] => g20p called [factorial(5)], expected: [120], got user answer [120]
    [4] => g20p called [factorial(3)], expected: [6], got user answer [6]
    [5] => g20p called [factorial(1)], expected: [1], got user answer [1]
    [6] => n0p user program succesfully executed. 
    [7] => b5p constraint [while]  was not found.
)

executing getFeedbacks() for testId 1 & qId 2
Array
(
    [0] => g5p missing colon [:] in user answer
    [1] => n0p expecting function [strMult] in answer found!
    [2] => g20p called [strMult("hello",1)], expected: [hello], got user answer [hello]
    [3] => g20p called [strMult("up", 4)], expected: [upupupup], got user answer [upupupup]
    [4] => g20p called [strMult("hey", 3)], expected: [heyheyhey], got user answer [heyheyhey]
    [5] => g20p called [strMult("aba", 2)], expected: [abaaba], got user answer [abaaba]
    [6] => n0p user program succesfully executed. 
    [7] => b10p constraint [for]  was not found.
    [8] => b8p constraint [print]  was not found.
)

executing getFeedbacks() for testId 1 & qId 5
Array
(
    [0] => b1.25p missing colon [:] in user answer
    [1] => n0p expecting function [sub] in answer found!
    [2] => b19.2p user program failed to execute. 
    [3] => g20p constraint [print] was found.
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)
    print a - b
        )

    [grades] => Array
        (
            [0] => 20
            [1] => 32
            [2] => 5
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => n0p expecting function [factorial] in answer found!
                    [2] => g20p called [factorial(2)], expected: [2], got user answer [2]
                    [3] => g20p called [factorial(5)], expected: [120], got user answer [120]
                    [4] => g20p called [factorial(3)], expected: [6], got user answer [6]
                    [5] => g20p called [factorial(1)], expected: [1], got user answer [1]
                    [6] => n0p user program succesfully executed. 
                    [7] => b5p constraint [while]  was not found.
                )

            [1] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => n0p expecting function [strMult] in answer found!
                    [2] => g20p called [strMult("hello",1)], expected: [hello], got user answer [hello]
                    [3] => g20p called [strMult("up", 4)], expected: [upupupup], got user answer [upupupup]
                    [4] => g20p called [strMult("hey", 3)], expected: [heyheyhey], got user answer [heyheyhey]
                    [5] => g20p called [strMult("aba", 2)], expected: [abaaba], got user answer [abaaba]
                    [6] => n0p user program succesfully executed. 
                    [7] => b10p constraint [for]  was not found.
                    [8] => b8p constraint [print]  was not found.
                )

            [2] => Array
                (
                    [0] => b1.25p missing colon [:] in user answer
                    [1] => n0p expecting function [sub] in answer found!
                    [2] => b19.2p user program failed to execute. 
                    [3] => g20p constraint [print] was found.
                )

        )

    [remarks] => Array
        (
            [0] => 1 should lose points for not using a while loop. 

2 should lose points for not using a for loop and for not printing the answer. 

3 should lose points for wrong name and for missing colon.
            [1] => 1 should lose points for not using a while loop. 

2 should lose points for not using a for loop and for not printing the answer. 

3 should lose points for wrong name and for missing colon.
            [2] => 1 should lose points for not using a while loop. 

2 should lose points for not using a for loop and for not printing the answer. 

3 should lose points for wrong name and for missing colon.
        )

)

executing ansObject() for test id : 1 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)
    print a - b
        )

    [grades] => Array
        (
            [0] => 20
            [1] => 32
            [2] => 5
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => n0p expecting function [factorial] in answer found!
                    [2] => g20p called [factorial(2)], expected: [2], got user answer [2]
                    [3] => g20p called [factorial(5)], expected: [120], got user answer [120]
                    [4] => g20p called [factorial(3)], expected: [6], got user answer [6]
                    [5] => g20p called [factorial(1)], expected: [1], got user answer [1]
                    [6] => n0p user program succesfully executed. 
                    [7] => b5p constraint [while]  was not found.
                )

            [1] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => n0p expecting function [strMult] in answer found!
                    [2] => g20p called [strMult("hello",1)], expected: [hello], got user answer [hello]
                    [3] => g20p called [strMult("up", 4)], expected: [upupupup], got user answer [upupupup]
                    [4] => g20p called [strMult("hey", 3)], expected: [heyheyhey], got user answer [heyheyhey]
                    [5] => g20p called [strMult("aba", 2)], expected: [abaaba], got user answer [abaaba]
                    [6] => n0p user program succesfully executed. 
                    [7] => b10p constraint [for]  was not found.
                    [8] => b8p constraint [print]  was not found.
                )

            [2] => Array
                (
                    [0] => b1.25p missing colon [:] in user answer
                    [1] => n0p expecting function [sub] in answer found!
                    [2] => b19.2p user program failed to execute. 
                    [3] => g20p constraint [print] was found.
                )

        )

    [remarks] => Array
        (
            [0] => 1 should lose points for not using a while loop. 

2 should lose points for not using a for loop and for not printing the answer. 

3 should lose points for wrong name and for missing colon.
            [1] => 1 should lose points for not using a while loop. 

2 should lose points for not using a for loop and for not printing the answer. 

3 should lose points for wrong name and for missing colon.
            [2] => 1 should lose points for not using a while loop. 

2 should lose points for not using a for loop and for not printing the answer. 

3 should lose points for wrong name and for missing colon.
        )

)

warning! ansObject is an array!
building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 1
            [desc] => Quiz One
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 4
                            [desc] => Write a function called factorial() which takes one integer parameter n, and returns n!. 
                            [topic] => Math Factorial
                            [diff] => 4
                            [tests] => Array
                                (
                                    [0] => factorial(2)=2
                                    [1] => factorial(5)=120
                                    [2] => factorial(3)=6
                                    [3] => factorial(1)=1
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                    [2] => Array
                        (
                            [id] => 5
                            [desc] => Write a function called sub() that takes two integers and prints their difference.
                            [topic] => Subtraction
                            [diff] => 1
                            [tests] => Array
                                (
                                    [0] => sub(3,4)="-1"
                                    [1] => sub(4,3)="1"
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 25
                    [1] => 50
                    [2] => 25
                )

        )

    [answers] => Array
        (
            [0] => def factorial(n):
    result = 1
    for i in range(n):
        if n == 0 or n == 1:
            break;
        else:
            result *= n
            n -= 1
    return result
            [1] => def strMult(s, n):
    return s*n
            [2] => def subtract(a,b)
    print a - b
        )

    [grades] => Array
        (
            [0] => 20
            [1] => 32
            [2] => 5
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => n0p expecting function [factorial] in answer found!
                    [2] => g20p called [factorial(2)], expected: [2], got user answer [2]
                    [3] => g20p called [factorial(5)], expected: [120], got user answer [120]
                    [4] => g20p called [factorial(3)], expected: [6], got user answer [6]
                    [5] => g20p called [factorial(1)], expected: [1], got user answer [1]
                    [6] => n0p user program succesfully executed. 
                    [7] => b5p constraint [while]  was not found.
                )

            [1] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => n0p expecting function [strMult] in answer found!
                    [2] => g20p called [strMult("hello",1)], expected: [hello], got user answer [hello]
                    [3] => g20p called [strMult("up", 4)], expected: [upupupup], got user answer [upupupup]
                    [4] => g20p called [strMult("hey", 3)], expected: [heyheyhey], got user answer [heyheyhey]
                    [5] => g20p called [strMult("aba", 2)], expected: [abaaba], got user answer [abaaba]
                    [6] => n0p user program succesfully executed. 
                    [7] => b10p constraint [for]  was not found.
                    [8] => b8p constraint [print]  was not found.
                )

            [2] => Array
                (
                    [0] => b1.25p missing colon [:] in user answer
                    [1] => n0p expecting function [sub] in answer found!
                    [2] => b19.2p user program failed to execute. 
                    [3] => g20p constraint [print] was found.
                )

        )

    [remarks] => Array
        (
            [0] => 1 should lose points for not using a while loop. 

2 should lose points for not using a for loop and for not printing the answer. 

3 should lose points for wrong name and for missing colon.
            [1] => 1 should lose points for not using a while loop. 

2 should lose points for not using a for loop and for not printing the answer. 

3 should lose points for wrong name and for missing colon.
            [2] => 1 should lose points for not using a while loop. 

2 should lose points for not using a for loop and for not printing the answer. 

3 should lose points for wrong name and for missing colon.
        )

)
pushing the attempt object into array of attempts
[ + ] page accessed testB 2019-04-13 07:55:57am
executing testObject() with testId = 2
SELECT * FROM Test WHERE Id = '2' 
test being formed (temp1)...
Array
(
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

test being formed (temp) ...
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
)

building question object for test...
[ + ] page accessed quesB 2019-04-13 07:55:57am
executing quesObject() with qId = 1
obtaining testcases for qId = 1
building the ques object (temp1)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [diff] => 2
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 1
    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
    [topic] => Operators
    [diff] => 2
    [tests] => Array
        (
            [0] => operation('+',3,3)=6
            [1] => operation('-',3,3)=0
            [2] => operation('/',3,3)=1
            [3] => operation('*',3,3)=9
            [4] => operation('%',3,3)=0
            [5] => operation('?',3,3)="error"
            [6] => operation('hi',3,3)="error"
        )

)
question object for test built!

obtaining points from each question id: 1 
pts for this question : 120 
[ + ] page accessed quesB 2019-04-13 07:55:57am
executing quesObject() with qId = 2
obtaining testcases for qId = 2
building the ques object (temp1)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [diff] => 3
)

the ques object with array cases (temp2)... 
Array
(
    [id] => 2
    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
    [topic] => Printing string
    [diff] => 3
    [tests] => Array
        (
            [0] => strMult("hello",1)=hello
            [1] => strMult("up", 4)=upupupup
            [2] => strMult("hey", 3)=heyheyhey
            [3] => strMult("aba", 2)=abaaba
        )

)
question object for test built!

obtaining points from each question id: 2 
pts for this question : 120 
executing testObject() for test id : 2 
Array
(
    [id] => 2
    [desc] => Vector Pioneer 2
    [rel] => 1
    [sub] => 1
    [ques] => Array
        (
            [0] => Array
                (
                    [id] => 1
                    [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                    [topic] => Operators
                    [diff] => 2
                    [tests] => Array
                        (
                            [0] => operation('+',3,3)=6
                            [1] => operation('-',3,3)=0
                            [2] => operation('/',3,3)=1
                            [3] => operation('*',3,3)=9
                            [4] => operation('%',3,3)=0
                            [5] => operation('?',3,3)="error"
                            [6] => operation('hi',3,3)="error"
                        )

                )

            [1] => Array
                (
                    [id] => 2
                    [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                    [topic] => Printing string
                    [diff] => 3
                    [tests] => Array
                        (
                            [0] => strMult("hello",1)=hello
                            [1] => strMult("up", 4)=upupupup
                            [2] => strMult("hey", 3)=heyheyhey
                            [3] => strMult("aba", 2)=abaaba
                        )

                )

        )

    [pts] => Array
        (
            [0] => 120
            [1] => 120
        )

)

pushed test 2 into testArray
executing getFeedbacks() for testId 2 & qId 1
Array
(
    [0] => g5p missing colon [:] in user answer
    [1] => b6p expecting function name [operation] in answer was not found!
    [2] => b91.2p user program failed to execute. 
)

executing getFeedbacks() for testId 2 & qId 2
Array
(
    [0] => g5p missing colon [:] in user answer
    [1] => n0p expecting function [strMult] in answer found!
    [2] => g20p called [strMult("hello",1)], expected: [hello], got user answer [hello]
    [3] => g20p called [strMult("up", 4)], expected: [upupupup], got user answer [upupupup]
    [4] => g20p called [strMult("hey", 3)], expected: [heyheyhey], got user answer [heyheyhey]
    [5] => g20p called [strMult("aba", 2)], expected: [abaaba], got user answer [abaaba]
    [6] => n0p user program succesfully executed. 
    [7] => b24p constraint [for]  was not found.
    [8] => b19.2p constraint [print]  was not found.
)

ansObject() formed the ansArray
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 23
            [1] => 77
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => b6p expecting function name [operation] in answer was not found!
                    [2] => b91.2p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => n0p expecting function [strMult] in answer found!
                    [2] => g20p called [strMult("hello",1)], expected: [hello], got user answer [hello]
                    [3] => g20p called [strMult("up", 4)], expected: [upupupup], got user answer [upupupup]
                    [4] => g20p called [strMult("hey", 3)], expected: [heyheyhey], got user answer [heyheyhey]
                    [5] => g20p called [strMult("aba", 2)], expected: [abaaba], got user answer [abaaba]
                    [6] => n0p user program succesfully executed. 
                    [7] => b24p constraint [for]  was not found.
                    [8] => b19.2p constraint [print]  was not found.
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

)

executing ansObject() for test id : 2 
ansObject() was succesful...output: 
Array
(
    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 23
            [1] => 77
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => b6p expecting function name [operation] in answer was not found!
                    [2] => b91.2p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => n0p expecting function [strMult] in answer found!
                    [2] => g20p called [strMult("hello",1)], expected: [hello], got user answer [hello]
                    [3] => g20p called [strMult("up", 4)], expected: [upupupup], got user answer [upupupup]
                    [4] => g20p called [strMult("hey", 3)], expected: [heyheyhey], got user answer [heyheyhey]
                    [5] => g20p called [strMult("aba", 2)], expected: [abaaba], got user answer [abaaba]
                    [6] => n0p user program succesfully executed. 
                    [7] => b24p constraint [for]  was not found.
                    [8] => b19.2p constraint [print]  was not found.
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

)

warning! ansObject is an array!
building the attempt object...
Array
(
    [test] => Array
        (
            [id] => 2
            [desc] => Vector Pioneer 2
            [rel] => 1
            [sub] => 1
            [ques] => Array
                (
                    [0] => Array
                        (
                            [id] => 1
                            [desc] => Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string "error".
                            [topic] => Operators
                            [diff] => 2
                            [tests] => Array
                                (
                                    [0] => operation('+',3,3)=6
                                    [1] => operation('-',3,3)=0
                                    [2] => operation('/',3,3)=1
                                    [3] => operation('*',3,3)=9
                                    [4] => operation('%',3,3)=0
                                    [5] => operation('?',3,3)="error"
                                    [6] => operation('hi',3,3)="error"
                                )

                        )

                    [1] => Array
                        (
                            [id] => 2
                            [desc] => Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.
                            [topic] => Printing string
                            [diff] => 3
                            [tests] => Array
                                (
                                    [0] => strMult("hello",1)=hello
                                    [1] => strMult("up", 4)=upupupup
                                    [2] => strMult("hey", 3)=heyheyhey
                                    [3] => strMult("aba", 2)=abaaba
                                )

                        )

                )

            [pts] => Array
                (
                    [0] => 120
                    [1] => 120
                )

        )

    [answers] => Array
        (
            [0] => def opernoob(op, a, b):
    if (op == '+'):
       return a+b
    if (op == '-'):
       return a-b
    if (op == '*'):
       return a*b
    if (op == '/'):
       return a/b
    if (op == '%'):
       return a%b
    if (op == '?'):
       return a?b 
            [1] => def strMult(s, n):
    return s * n
        )

    [grades] => Array
        (
            [0] => 23
            [1] => 77
        )

    [feedback] => Array
        (
            [0] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => b6p expecting function name [operation] in answer was not found!
                    [2] => b91.2p user program failed to execute. 
                )

            [1] => Array
                (
                    [0] => g5p missing colon [:] in user answer
                    [1] => n0p expecting function [strMult] in answer found!
                    [2] => g20p called [strMult("hello",1)], expected: [hello], got user answer [hello]
                    [3] => g20p called [strMult("up", 4)], expected: [upupupup], got user answer [upupupup]
                    [4] => g20p called [strMult("hey", 3)], expected: [heyheyhey], got user answer [heyheyhey]
                    [5] => g20p called [strMult("aba", 2)], expected: [abaaba], got user answer [abaaba]
                    [6] => n0p user program succesfully executed. 
                    [7] => b24p constraint [for]  was not found.
                    [8] => b19.2p constraint [print]  was not found.
                )

        )

    [remarks] => Array
        (
            [0] => 
            [1] => 
        )

)
pushing the attempt object into array of attempts
executing getAttempt()...output:
{"type":"getA","error":0,"attempts":[{"test":{"id":"1","desc":"Quiz One","rel":"1","sub":"1","ques":[{"id":"4","desc":"Write a function called factorial() which takes one integer parameter n, and returns n!. ","topic":"Math Factorial","diff":"4","tests":["factorial(2)=2","factorial(5)=120","factorial(3)=6","factorial(1)=1"]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]},{"id":"5","desc":"Write a function called sub() that takes two integers and prints their difference.","topic":"Subtraction","diff":"1","tests":["sub(3,4)=\"-1\"","sub(4,3)=\"1\""]}],"pts":["25","50","25"]},"answers":["def factorial(n):\n    result = 1\n    for i in range(n):\n        if n == 0 or n == 1:\n            break;\n        else:\n            result *= n\n            n -= 1\n    return result","def strMult(s, n):\n    return s*n","def subtract(a,b)\n    print a - b"],"grades":["20","32","5"],"feedback":[["g5p missing colon [:] in user answer","n0p expecting function [factorial] in answer found!","g20p called [factorial(2)], expected: [2], got user answer [2]","g20p called [factorial(5)], expected: [120], got user answer [120]","g20p called [factorial(3)], expected: [6], got user answer [6]","g20p called [factorial(1)], expected: [1], got user answer [1]","n0p user program succesfully executed. ","b5p constraint [while]  was not found."],["g5p missing colon [:] in user answer","n0p expecting function [strMult] in answer found!","g20p called [strMult(\"hello\",1)], expected: [hello], got user answer [hello]","g20p called [strMult(\"up\", 4)], expected: [upupupup], got user answer [upupupup]","g20p called [strMult(\"hey\", 3)], expected: [heyheyhey], got user answer [heyheyhey]","g20p called [strMult(\"aba\", 2)], expected: [abaaba], got user answer [abaaba]","n0p user program succesfully executed. ","b10p constraint [for]  was not found.","b8p constraint [print]  was not found."],["b1.25p missing colon [:] in user answer","n0p expecting function [sub] in answer found!","b19.2p user program failed to execute. ","g20p constraint [print] was found."]],"remarks":["1 should lose points for not using a while loop. \n\n2 should lose points for not using a for loop and for not printing the answer. \n\n3 should lose points for wrong name and for missing colon.","1 should lose points for not using a while loop. \n\n2 should lose points for not using a for loop and for not printing the answer. \n\n3 should lose points for wrong name and for missing colon.","1 should lose points for not using a while loop. \n\n2 should lose points for not using a for loop and for not printing the answer. \n\n3 should lose points for wrong name and for missing colon."]},{"test":{"id":"2","desc":"Vector Pioneer 2","rel":"1","sub":"1","ques":[{"id":"1","desc":"Write a function called operation that takes three parameters: a string 'op', an int 'a', and an int 'b'. Op can be '+', '-', '*', '\/', '%' and the function should return that operation called with the two parameters a and b. If an unknown op is given, the program should return the string \"error\".","topic":"Operators","diff":"2","tests":["operation('+',3,3)=6","operation('-',3,3)=0","operation('\/',3,3)=1","operation('*',3,3)=9","operation('%',3,3)=0","operation('?',3,3)=\"error\"","operation('hi',3,3)=\"error\""]},{"id":"2","desc":"Write a function called strMult() that takes two parameters: a string s, and an integer n. The function should print the string s concatenated with itself n times.","topic":"Printing string","diff":"3","tests":["strMult(\"hello\",1)=hello","strMult(\"up\", 4)=upupupup","strMult(\"hey\", 3)=heyheyhey","strMult(\"aba\", 2)=abaaba"]}],"pts":["120","120"]},"answers":["def opernoob(op, a, b):\n    if (op == '+'):\n       return a+b\n    if (op == '-'):\n       return a-b\n    if (op == '*'):\n       return a*b\n    if (op == '\/'):\n       return a\/b\n    if (op == '%'):\n       return a%b\n    if (op == '?'):\n       return a?b ","def strMult(s, n):\n    return s * n"],"grades":["23","77"],"feedback":[["g5p missing colon [:] in user answer","b6p expecting function name [operation] in answer was not found!","b91.2p user program failed to execute. "],["g5p missing colon [:] in user answer","n0p expecting function [strMult] in answer found!","g20p called [strMult(\"hello\",1)], expected: [hello], got user answer [hello]","g20p called [strMult(\"up\", 4)], expected: [upupupup], got user answer [upupupup]","g20p called [strMult(\"hey\", 3)], expected: [heyheyhey], got user answer [heyheyhey]","g20p called [strMult(\"aba\", 2)], expected: [abaaba], got user answer [abaaba]","n0p user program succesfully executed. ","b24p constraint [for]  was not found.","b19.2p constraint [print]  was not found."]],"remarks":["",""]}]}